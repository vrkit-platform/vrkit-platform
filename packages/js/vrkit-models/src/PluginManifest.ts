// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "PluginManifest.proto" (package "IRacingTools.Models", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { SizeI } from "./Geometry";
import { SupportedGame } from "./AppInterfaceTypes";
/**
 * @generated from protobuf message IRacingTools.Models.PluginComponentDefinition
 */
export interface PluginComponentDefinition {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: IRacingTools.Models.PluginComponentType type = 2;
     */
    type: PluginComponentType;
    /**
     * @generated from protobuf field: string name = 5;
     */
    name: string;
    /**
     * @generated from protobuf field: string description = 6;
     */
    description: string;
    /**
     * @generated from protobuf field: repeated IRacingTools.Models.SupportedGame supported_games = 10;
     */
    supportedGames: SupportedGame[];
    /**
     * *
     * Common parameters irrespective of game or component type
     *
     * @generated from protobuf field: map<string, string> common_parameters = 15;
     */
    commonParameters: {
        [key: string]: string;
    };
    /**
     * @generated from protobuf field: IRacingTools.Models.PluginComponentDefinition.OverlayCommonSettings overlay_common_settings = 20;
     */
    overlayCommonSettings?: PluginComponentDefinition_OverlayCommonSettings;
    /**
     * IROverlaySettings, can be omitted
     *
     * @generated from protobuf field: IRacingTools.Models.PluginComponentDefinition.OverlayIRSettings overlay_ir_settings = 21;
     */
    overlayIrSettings?: PluginComponentDefinition_OverlayIRSettings;
}
/**
 * *
 * Common Overlay specific settings
 *
 * @generated from protobuf message IRacingTools.Models.PluginComponentDefinition.OverlayCommonSettings
 */
export interface PluginComponentDefinition_OverlayCommonSettings {
    /**
     * FPS OVERRIDING USER/APP CONFIGURED
     * < 1: USER/APP ARE USED TO CONFIGURE,
     * DEFAULT VALUE (0) USES THE INTERNAL DEFAULT OF 10FPS
     *
     * @generated from protobuf field: int32 fps = 1;
     */
    fps: number;
    /**
     * THIS IS REQUIRED
     *
     * @generated from protobuf field: IRacingTools.Models.SizeI initial_size = 2;
     */
    initialSize?: SizeI;
    /**
     * THE ACTUAL ASPECT RATIO IS EXTRAPOLATED FROM
     * `initial_size` PROVIDED
     *
     * @generated from protobuf field: bool force_aspect_ratio = 3;
     */
    forceAspectRatio: boolean;
    /**
     * CAN THE OVERLAY BE RESIZED
     *
     * @generated from protobuf field: bool can_resize = 4;
     */
    canResize: boolean;
    /**
     * VISIBLE REGARDLESS OF AN ACTIVE GAME RUNNING
     *
     * @generated from protobuf field: bool visible_without_connection = 5;
     */
    visibleWithoutConnection: boolean;
}
/**
 * *
 * IRacing Overlay specific settings
 *
 * @generated from protobuf message IRacingTools.Models.PluginComponentDefinition.OverlayIRSettings
 */
export interface PluginComponentDefinition_OverlayIRSettings {
    /**
     * @generated from protobuf field: repeated string data_variables_used = 5;
     */
    dataVariablesUsed: string[];
    /**
     * @generated from protobuf field: map<string, string> parameters = 10;
     */
    parameters: {
        [key: string]: string;
    };
}
/**
 * @generated from protobuf message IRacingTools.Models.PluginManifest
 */
export interface PluginManifest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string name = 5;
     */
    name: string;
    /**
     * @generated from protobuf field: string description = 6;
     */
    description: string;
    /**
     * @generated from protobuf field: IRacingTools.Models.PluginManifest.PluginAuthor author = 10;
     */
    author?: PluginManifest_PluginAuthor;
    /**
     * @generated from protobuf field: repeated IRacingTools.Models.PluginComponentDefinition components = 20;
     */
    components: PluginComponentDefinition[];
}
/**
 * @generated from protobuf message IRacingTools.Models.PluginManifest.PluginAuthor
 */
export interface PluginManifest_PluginAuthor {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: string company = 2;
     */
    company: string;
    /**
     * @generated from protobuf field: string email = 5;
     */
    email: string;
}
/**
 * @generated from protobuf enum IRacingTools.Models.PluginComponentType
 */
export enum PluginComponentType {
    /**
     * @generated from protobuf enum value: PLUGIN_COMPONENT_TYPE_OVERLAY = 0;
     */
    OVERLAY = 0
}
// @generated message type with reflection information, may provide speed optimized methods
class PluginComponentDefinition$Type extends MessageType<PluginComponentDefinition> {
    constructor() {
        super("IRacingTools.Models.PluginComponentDefinition", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "type", kind: "enum", T: () => ["IRacingTools.Models.PluginComponentType", PluginComponentType, "PLUGIN_COMPONENT_TYPE_"] },
            { no: 5, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "supported_games", kind: "enum", repeat: 1 /*RepeatType.PACKED*/, T: () => ["IRacingTools.Models.SupportedGame", SupportedGame, "SUPPORTED_GAME_"] },
            { no: 15, name: "common_parameters", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } },
            { no: 20, name: "overlay_common_settings", kind: "message", T: () => PluginComponentDefinition_OverlayCommonSettings },
            { no: 21, name: "overlay_ir_settings", kind: "message", T: () => PluginComponentDefinition_OverlayIRSettings }
        ]);
    }
    create(value?: PartialMessage<PluginComponentDefinition>): PluginComponentDefinition {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.type = 0;
        message.name = "";
        message.description = "";
        message.supportedGames = [];
        message.commonParameters = {};
        if (value !== undefined)
            reflectionMergePartial<PluginComponentDefinition>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PluginComponentDefinition): PluginComponentDefinition {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* IRacingTools.Models.PluginComponentType type */ 2:
                    message.type = reader.int32();
                    break;
                case /* string name */ 5:
                    message.name = reader.string();
                    break;
                case /* string description */ 6:
                    message.description = reader.string();
                    break;
                case /* repeated IRacingTools.Models.SupportedGame supported_games */ 10:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.supportedGames.push(reader.int32());
                    else
                        message.supportedGames.push(reader.int32());
                    break;
                case /* map<string, string> common_parameters */ 15:
                    this.binaryReadMap15(message.commonParameters, reader, options);
                    break;
                case /* IRacingTools.Models.PluginComponentDefinition.OverlayCommonSettings overlay_common_settings */ 20:
                    message.overlayCommonSettings = PluginComponentDefinition_OverlayCommonSettings.internalBinaryRead(reader, reader.uint32(), options, message.overlayCommonSettings);
                    break;
                case /* IRacingTools.Models.PluginComponentDefinition.OverlayIRSettings overlay_ir_settings */ 21:
                    message.overlayIrSettings = PluginComponentDefinition_OverlayIRSettings.internalBinaryRead(reader, reader.uint32(), options, message.overlayIrSettings);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap15(map: PluginComponentDefinition["commonParameters"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof PluginComponentDefinition["commonParameters"] | undefined, val: PluginComponentDefinition["commonParameters"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field IRacingTools.Models.PluginComponentDefinition.common_parameters");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: PluginComponentDefinition, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* IRacingTools.Models.PluginComponentType type = 2; */
        if (message.type !== 0)
            writer.tag(2, WireType.Varint).int32(message.type);
        /* string name = 5; */
        if (message.name !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.name);
        /* string description = 6; */
        if (message.description !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.description);
        /* repeated IRacingTools.Models.SupportedGame supported_games = 10; */
        if (message.supportedGames.length) {
            writer.tag(10, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.supportedGames.length; i++)
                writer.int32(message.supportedGames[i]);
            writer.join();
        }
        /* map<string, string> common_parameters = 15; */
        for (let k of globalThis.Object.keys(message.commonParameters))
            writer.tag(15, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.commonParameters[k]).join();
        /* IRacingTools.Models.PluginComponentDefinition.OverlayCommonSettings overlay_common_settings = 20; */
        if (message.overlayCommonSettings)
            PluginComponentDefinition_OverlayCommonSettings.internalBinaryWrite(message.overlayCommonSettings, writer.tag(20, WireType.LengthDelimited).fork(), options).join();
        /* IRacingTools.Models.PluginComponentDefinition.OverlayIRSettings overlay_ir_settings = 21; */
        if (message.overlayIrSettings)
            PluginComponentDefinition_OverlayIRSettings.internalBinaryWrite(message.overlayIrSettings, writer.tag(21, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IRacingTools.Models.PluginComponentDefinition
 */
export const PluginComponentDefinition = new PluginComponentDefinition$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PluginComponentDefinition_OverlayCommonSettings$Type extends MessageType<PluginComponentDefinition_OverlayCommonSettings> {
    constructor() {
        super("IRacingTools.Models.PluginComponentDefinition.OverlayCommonSettings", [
            { no: 1, name: "fps", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "initial_size", kind: "message", T: () => SizeI },
            { no: 3, name: "force_aspect_ratio", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "can_resize", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "visible_without_connection", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<PluginComponentDefinition_OverlayCommonSettings>): PluginComponentDefinition_OverlayCommonSettings {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.fps = 0;
        message.forceAspectRatio = false;
        message.canResize = false;
        message.visibleWithoutConnection = false;
        if (value !== undefined)
            reflectionMergePartial<PluginComponentDefinition_OverlayCommonSettings>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PluginComponentDefinition_OverlayCommonSettings): PluginComponentDefinition_OverlayCommonSettings {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 fps */ 1:
                    message.fps = reader.int32();
                    break;
                case /* IRacingTools.Models.SizeI initial_size */ 2:
                    message.initialSize = SizeI.internalBinaryRead(reader, reader.uint32(), options, message.initialSize);
                    break;
                case /* bool force_aspect_ratio */ 3:
                    message.forceAspectRatio = reader.bool();
                    break;
                case /* bool can_resize */ 4:
                    message.canResize = reader.bool();
                    break;
                case /* bool visible_without_connection */ 5:
                    message.visibleWithoutConnection = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PluginComponentDefinition_OverlayCommonSettings, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 fps = 1; */
        if (message.fps !== 0)
            writer.tag(1, WireType.Varint).int32(message.fps);
        /* IRacingTools.Models.SizeI initial_size = 2; */
        if (message.initialSize)
            SizeI.internalBinaryWrite(message.initialSize, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bool force_aspect_ratio = 3; */
        if (message.forceAspectRatio !== false)
            writer.tag(3, WireType.Varint).bool(message.forceAspectRatio);
        /* bool can_resize = 4; */
        if (message.canResize !== false)
            writer.tag(4, WireType.Varint).bool(message.canResize);
        /* bool visible_without_connection = 5; */
        if (message.visibleWithoutConnection !== false)
            writer.tag(5, WireType.Varint).bool(message.visibleWithoutConnection);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IRacingTools.Models.PluginComponentDefinition.OverlayCommonSettings
 */
export const PluginComponentDefinition_OverlayCommonSettings = new PluginComponentDefinition_OverlayCommonSettings$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PluginComponentDefinition_OverlayIRSettings$Type extends MessageType<PluginComponentDefinition_OverlayIRSettings> {
    constructor() {
        super("IRacingTools.Models.PluginComponentDefinition.OverlayIRSettings", [
            { no: 5, name: "data_variables_used", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "parameters", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } }
        ]);
    }
    create(value?: PartialMessage<PluginComponentDefinition_OverlayIRSettings>): PluginComponentDefinition_OverlayIRSettings {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.dataVariablesUsed = [];
        message.parameters = {};
        if (value !== undefined)
            reflectionMergePartial<PluginComponentDefinition_OverlayIRSettings>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PluginComponentDefinition_OverlayIRSettings): PluginComponentDefinition_OverlayIRSettings {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string data_variables_used */ 5:
                    message.dataVariablesUsed.push(reader.string());
                    break;
                case /* map<string, string> parameters */ 10:
                    this.binaryReadMap10(message.parameters, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap10(map: PluginComponentDefinition_OverlayIRSettings["parameters"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof PluginComponentDefinition_OverlayIRSettings["parameters"] | undefined, val: PluginComponentDefinition_OverlayIRSettings["parameters"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field IRacingTools.Models.PluginComponentDefinition.OverlayIRSettings.parameters");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: PluginComponentDefinition_OverlayIRSettings, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string data_variables_used = 5; */
        for (let i = 0; i < message.dataVariablesUsed.length; i++)
            writer.tag(5, WireType.LengthDelimited).string(message.dataVariablesUsed[i]);
        /* map<string, string> parameters = 10; */
        for (let k of globalThis.Object.keys(message.parameters))
            writer.tag(10, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.parameters[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IRacingTools.Models.PluginComponentDefinition.OverlayIRSettings
 */
export const PluginComponentDefinition_OverlayIRSettings = new PluginComponentDefinition_OverlayIRSettings$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PluginManifest$Type extends MessageType<PluginManifest> {
    constructor() {
        super("IRacingTools.Models.PluginManifest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "author", kind: "message", T: () => PluginManifest_PluginAuthor },
            { no: 20, name: "components", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PluginComponentDefinition }
        ]);
    }
    create(value?: PartialMessage<PluginManifest>): PluginManifest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.name = "";
        message.description = "";
        message.components = [];
        if (value !== undefined)
            reflectionMergePartial<PluginManifest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PluginManifest): PluginManifest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string name */ 5:
                    message.name = reader.string();
                    break;
                case /* string description */ 6:
                    message.description = reader.string();
                    break;
                case /* IRacingTools.Models.PluginManifest.PluginAuthor author */ 10:
                    message.author = PluginManifest_PluginAuthor.internalBinaryRead(reader, reader.uint32(), options, message.author);
                    break;
                case /* repeated IRacingTools.Models.PluginComponentDefinition components */ 20:
                    message.components.push(PluginComponentDefinition.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PluginManifest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string name = 5; */
        if (message.name !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.name);
        /* string description = 6; */
        if (message.description !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.description);
        /* IRacingTools.Models.PluginManifest.PluginAuthor author = 10; */
        if (message.author)
            PluginManifest_PluginAuthor.internalBinaryWrite(message.author, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* repeated IRacingTools.Models.PluginComponentDefinition components = 20; */
        for (let i = 0; i < message.components.length; i++)
            PluginComponentDefinition.internalBinaryWrite(message.components[i], writer.tag(20, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IRacingTools.Models.PluginManifest
 */
export const PluginManifest = new PluginManifest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PluginManifest_PluginAuthor$Type extends MessageType<PluginManifest_PluginAuthor> {
    constructor() {
        super("IRacingTools.Models.PluginManifest.PluginAuthor", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "company", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PluginManifest_PluginAuthor>): PluginManifest_PluginAuthor {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.company = "";
        message.email = "";
        if (value !== undefined)
            reflectionMergePartial<PluginManifest_PluginAuthor>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PluginManifest_PluginAuthor): PluginManifest_PluginAuthor {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string company */ 2:
                    message.company = reader.string();
                    break;
                case /* string email */ 5:
                    message.email = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PluginManifest_PluginAuthor, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string company = 2; */
        if (message.company !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.company);
        /* string email = 5; */
        if (message.email !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.email);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IRacingTools.Models.PluginManifest.PluginAuthor
 */
export const PluginManifest_PluginAuthor = new PluginManifest_PluginAuthor$Type();
