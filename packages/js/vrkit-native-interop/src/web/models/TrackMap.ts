// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "TrackMap.proto" (package "IRacingTools.Models", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { SizeF } from "./Geometry";
import { LapCoordinate } from "./LapCoordinate";
import { TrackLayoutMetadata } from "./TrackLayoutMetadata";
/**
 * @generated from protobuf message IRacingTools.Models.TrackMap
 */
export interface TrackMap {
    /**
     * @generated from protobuf field: IRacingTools.Models.TrackLayoutMetadata track_layout_metadata = 1;
     */
    trackLayoutMetadata?: TrackLayoutMetadata;
    /**
     * @generated from protobuf field: float total_distance = 2;
     */
    totalDistance: number;
    /**
     * @generated from protobuf field: repeated IRacingTools.Models.LapCoordinate path = 10;
     */
    path: LapCoordinate[];
    /**
     * @generated from protobuf field: IRacingTools.Models.SizeF size = 20;
     */
    size?: SizeF;
    /**
     * @generated from protobuf field: IRacingTools.Models.SizeF scaled_size = 21;
     */
    scaledSize?: SizeF;
    /**
     * @generated from protobuf field: float scaled_ratio = 22;
     */
    scaledRatio: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class TrackMap$Type extends MessageType<TrackMap> {
    constructor() {
        super("IRacingTools.Models.TrackMap", [
            { no: 1, name: "track_layout_metadata", kind: "message", T: () => TrackLayoutMetadata },
            { no: 2, name: "total_distance", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 10, name: "path", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => LapCoordinate },
            { no: 20, name: "size", kind: "message", T: () => SizeF },
            { no: 21, name: "scaled_size", kind: "message", T: () => SizeF },
            { no: 22, name: "scaled_ratio", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<TrackMap>): TrackMap {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.totalDistance = 0;
        message.path = [];
        message.scaledRatio = 0;
        if (value !== undefined)
            reflectionMergePartial<TrackMap>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TrackMap): TrackMap {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* IRacingTools.Models.TrackLayoutMetadata track_layout_metadata */ 1:
                    message.trackLayoutMetadata = TrackLayoutMetadata.internalBinaryRead(reader, reader.uint32(), options, message.trackLayoutMetadata);
                    break;
                case /* float total_distance */ 2:
                    message.totalDistance = reader.float();
                    break;
                case /* repeated IRacingTools.Models.LapCoordinate path */ 10:
                    message.path.push(LapCoordinate.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* IRacingTools.Models.SizeF size */ 20:
                    message.size = SizeF.internalBinaryRead(reader, reader.uint32(), options, message.size);
                    break;
                case /* IRacingTools.Models.SizeF scaled_size */ 21:
                    message.scaledSize = SizeF.internalBinaryRead(reader, reader.uint32(), options, message.scaledSize);
                    break;
                case /* float scaled_ratio */ 22:
                    message.scaledRatio = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TrackMap, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* IRacingTools.Models.TrackLayoutMetadata track_layout_metadata = 1; */
        if (message.trackLayoutMetadata)
            TrackLayoutMetadata.internalBinaryWrite(message.trackLayoutMetadata, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* float total_distance = 2; */
        if (message.totalDistance !== 0)
            writer.tag(2, WireType.Bit32).float(message.totalDistance);
        /* repeated IRacingTools.Models.LapCoordinate path = 10; */
        for (let i = 0; i < message.path.length; i++)
            LapCoordinate.internalBinaryWrite(message.path[i], writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* IRacingTools.Models.SizeF size = 20; */
        if (message.size)
            SizeF.internalBinaryWrite(message.size, writer.tag(20, WireType.LengthDelimited).fork(), options).join();
        /* IRacingTools.Models.SizeF scaled_size = 21; */
        if (message.scaledSize)
            SizeF.internalBinaryWrite(message.scaledSize, writer.tag(21, WireType.LengthDelimited).fork(), options).join();
        /* float scaled_ratio = 22; */
        if (message.scaledRatio !== 0)
            writer.tag(22, WireType.Bit32).float(message.scaledRatio);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IRacingTools.Models.TrackMap
 */
export const TrackMap = new TrackMap$Type();
