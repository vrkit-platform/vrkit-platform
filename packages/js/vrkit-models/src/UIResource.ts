// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "UIResource.proto" (package "IRacingTools.Models", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { ColorFormat } from "./GraphicsTypes";
import { SizeI } from "./Geometry";
import { ImageFormat } from "./GraphicsTypes";
/**
 * @generated from protobuf message IRacingTools.Models.UIImageResource
 */
export interface UIImageResource {
    /**
     * @generated from protobuf field: IRacingTools.Models.ImageFormat format = 1;
     */
    format: ImageFormat;
    /**
     * @generated from protobuf field: string url = 2;
     */
    url: string;
    /**
     * @generated from protobuf field: bool is_data_url = 3;
     */
    isDataUrl: boolean;
    /**
     * @generated from protobuf field: IRacingTools.Models.SizeI size = 5;
     */
    size?: SizeI;
    /**
     * @generated from protobuf field: string description = 50;
     */
    description: string;
}
/**
 * @generated from protobuf message IRacingTools.Models.UIColorResource
 */
export interface UIColorResource {
    /**
     * @generated from protobuf field: IRacingTools.Models.ColorFormat format = 1;
     */
    format: ColorFormat;
    /**
     * @generated from protobuf field: string data = 2;
     */
    data: string;
    /**
     * @generated from protobuf field: repeated float data_parts = 3;
     */
    dataParts: number[];
    /**
     * @generated from protobuf field: string label = 10;
     */
    label: string;
}
/**
 * @generated from protobuf message IRacingTools.Models.UIResource
 */
export interface UIResource {
    /**
     * @generated from protobuf field: IRacingTools.Models.UIColorResource color = 1;
     */
    color?: UIColorResource;
    /**
     * @generated from protobuf field: IRacingTools.Models.UIImageResource icon = 5;
     */
    icon?: UIImageResource;
}
// @generated message type with reflection information, may provide speed optimized methods
class UIImageResource$Type extends MessageType<UIImageResource> {
    constructor() {
        super("IRacingTools.Models.UIImageResource", [
            { no: 1, name: "format", kind: "enum", T: () => ["IRacingTools.Models.ImageFormat", ImageFormat, "IMAGE_FORMAT_"] },
            { no: 2, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "is_data_url", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "size", kind: "message", T: () => SizeI },
            { no: 50, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UIImageResource>): UIImageResource {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.format = 0;
        message.url = "";
        message.isDataUrl = false;
        message.description = "";
        if (value !== undefined)
            reflectionMergePartial<UIImageResource>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UIImageResource): UIImageResource {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* IRacingTools.Models.ImageFormat format */ 1:
                    message.format = reader.int32();
                    break;
                case /* string url */ 2:
                    message.url = reader.string();
                    break;
                case /* bool is_data_url */ 3:
                    message.isDataUrl = reader.bool();
                    break;
                case /* IRacingTools.Models.SizeI size */ 5:
                    message.size = SizeI.internalBinaryRead(reader, reader.uint32(), options, message.size);
                    break;
                case /* string description */ 50:
                    message.description = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UIImageResource, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* IRacingTools.Models.ImageFormat format = 1; */
        if (message.format !== 0)
            writer.tag(1, WireType.Varint).int32(message.format);
        /* string url = 2; */
        if (message.url !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.url);
        /* bool is_data_url = 3; */
        if (message.isDataUrl !== false)
            writer.tag(3, WireType.Varint).bool(message.isDataUrl);
        /* IRacingTools.Models.SizeI size = 5; */
        if (message.size)
            SizeI.internalBinaryWrite(message.size, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* string description = 50; */
        if (message.description !== "")
            writer.tag(50, WireType.LengthDelimited).string(message.description);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IRacingTools.Models.UIImageResource
 */
export const UIImageResource = new UIImageResource$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UIColorResource$Type extends MessageType<UIColorResource> {
    constructor() {
        super("IRacingTools.Models.UIColorResource", [
            { no: 1, name: "format", kind: "enum", T: () => ["IRacingTools.Models.ColorFormat", ColorFormat, "COLOR_FORMAT_"] },
            { no: 2, name: "data", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "data_parts", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 2 /*ScalarType.FLOAT*/ },
            { no: 10, name: "label", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UIColorResource>): UIColorResource {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.format = 0;
        message.data = "";
        message.dataParts = [];
        message.label = "";
        if (value !== undefined)
            reflectionMergePartial<UIColorResource>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UIColorResource): UIColorResource {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* IRacingTools.Models.ColorFormat format */ 1:
                    message.format = reader.int32();
                    break;
                case /* string data */ 2:
                    message.data = reader.string();
                    break;
                case /* repeated float data_parts */ 3:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.dataParts.push(reader.float());
                    else
                        message.dataParts.push(reader.float());
                    break;
                case /* string label */ 10:
                    message.label = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UIColorResource, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* IRacingTools.Models.ColorFormat format = 1; */
        if (message.format !== 0)
            writer.tag(1, WireType.Varint).int32(message.format);
        /* string data = 2; */
        if (message.data !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.data);
        /* repeated float data_parts = 3; */
        if (message.dataParts.length) {
            writer.tag(3, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.dataParts.length; i++)
                writer.float(message.dataParts[i]);
            writer.join();
        }
        /* string label = 10; */
        if (message.label !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.label);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IRacingTools.Models.UIColorResource
 */
export const UIColorResource = new UIColorResource$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UIResource$Type extends MessageType<UIResource> {
    constructor() {
        super("IRacingTools.Models.UIResource", [
            { no: 1, name: "color", kind: "message", T: () => UIColorResource },
            { no: 5, name: "icon", kind: "message", T: () => UIImageResource }
        ]);
    }
    create(value?: PartialMessage<UIResource>): UIResource {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UIResource>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UIResource): UIResource {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* IRacingTools.Models.UIColorResource color */ 1:
                    message.color = UIColorResource.internalBinaryRead(reader, reader.uint32(), options, message.color);
                    break;
                case /* IRacingTools.Models.UIImageResource icon */ 5:
                    message.icon = UIImageResource.internalBinaryRead(reader, reader.uint32(), options, message.icon);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UIResource, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* IRacingTools.Models.UIColorResource color = 1; */
        if (message.color)
            UIColorResource.internalBinaryWrite(message.color, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* IRacingTools.Models.UIImageResource icon = 5; */
        if (message.icon)
            UIImageResource.internalBinaryWrite(message.icon, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IRacingTools.Models.UIResource
 */
export const UIResource = new UIResource$Type();
