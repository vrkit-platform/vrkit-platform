// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "TrackMapFile.proto" (package "IRacingTools.Models", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { FileInfo } from "./FileInfo";
import { TrackLayoutMetadata } from "./TrackLayoutMetadata";
/**
 * @generated from protobuf message IRacingTools.Models.TrackMapFile
 */
export interface TrackMapFile {
    /**
     * *
     * Track Layout ID
     *
     * @generated from protobuf field: IRacingTools.Models.TrackLayoutMetadata track_layout_metadata = 1;
     */
    trackLayoutMetadata?: TrackLayoutMetadata;
    /**
     * @generated from protobuf field: IRacingTools.Models.FileInfo file_info = 2;
     */
    fileInfo?: FileInfo;
}
// @generated message type with reflection information, may provide speed optimized methods
class TrackMapFile$Type extends MessageType<TrackMapFile> {
    constructor() {
        super("IRacingTools.Models.TrackMapFile", [
            { no: 1, name: "track_layout_metadata", kind: "message", T: () => TrackLayoutMetadata },
            { no: 2, name: "file_info", kind: "message", T: () => FileInfo }
        ]);
    }
    create(value?: PartialMessage<TrackMapFile>): TrackMapFile {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TrackMapFile>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TrackMapFile): TrackMapFile {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* IRacingTools.Models.TrackLayoutMetadata track_layout_metadata */ 1:
                    message.trackLayoutMetadata = TrackLayoutMetadata.internalBinaryRead(reader, reader.uint32(), options, message.trackLayoutMetadata);
                    break;
                case /* IRacingTools.Models.FileInfo file_info */ 2:
                    message.fileInfo = FileInfo.internalBinaryRead(reader, reader.uint32(), options, message.fileInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TrackMapFile, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* IRacingTools.Models.TrackLayoutMetadata track_layout_metadata = 1; */
        if (message.trackLayoutMetadata)
            TrackLayoutMetadata.internalBinaryWrite(message.trackLayoutMetadata, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* IRacingTools.Models.FileInfo file_info = 2; */
        if (message.fileInfo)
            FileInfo.internalBinaryWrite(message.fileInfo, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IRacingTools.Models.TrackMapFile
 */
export const TrackMapFile = new TrackMapFile$Type();
