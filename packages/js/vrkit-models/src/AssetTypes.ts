// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "AssetTypes.proto" (package "IRacingTools.Models", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { PositionI } from "./Geometry";
import { SizeI } from "./Geometry";
/**
 * @generated from protobuf message IRacingTools.Models.Image
 */
export interface Image {
    /**
     * @generated from protobuf field: string url = 1;
     */
    url: string;
    /**
     * @generated from protobuf field: IRacingTools.Models.ImageType type = 2;
     */
    type: ImageType;
    /**
     * @generated from protobuf field: IRacingTools.Models.SizeI size = 10;
     */
    size?: SizeI;
    /**
     * @generated from protobuf field: IRacingTools.Models.PositionI position = 11;
     */
    position?: PositionI;
}
/**
 * @generated from protobuf enum IRacingTools.Models.ImageType
 */
export enum ImageType {
    /**
     * @generated from protobuf enum value: svg = 0;
     */
    svg = 0,
    /**
     * @generated from protobuf enum value: jpg = 1;
     */
    jpg = 1,
    /**
     * @generated from protobuf enum value: png = 2;
     */
    png = 2,
    /**
     * @generated from protobuf enum value: gif = 3;
     */
    gif = 3,
    /**
     * @generated from protobuf enum value: preset = 4;
     */
    preset = 4
}
// @generated message type with reflection information, may provide speed optimized methods
class Image$Type extends MessageType<Image> {
    constructor() {
        super("IRacingTools.Models.Image", [
            { no: 1, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "type", kind: "enum", T: () => ["IRacingTools.Models.ImageType", ImageType] },
            { no: 10, name: "size", kind: "message", T: () => SizeI },
            { no: 11, name: "position", kind: "message", T: () => PositionI }
        ]);
    }
    create(value?: PartialMessage<Image>): Image {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.url = "";
        message.type = 0;
        if (value !== undefined)
            reflectionMergePartial<Image>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Image): Image {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string url */ 1:
                    message.url = reader.string();
                    break;
                case /* IRacingTools.Models.ImageType type */ 2:
                    message.type = reader.int32();
                    break;
                case /* IRacingTools.Models.SizeI size */ 10:
                    message.size = SizeI.internalBinaryRead(reader, reader.uint32(), options, message.size);
                    break;
                case /* IRacingTools.Models.PositionI position */ 11:
                    message.position = PositionI.internalBinaryRead(reader, reader.uint32(), options, message.position);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Image, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string url = 1; */
        if (message.url !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.url);
        /* IRacingTools.Models.ImageType type = 2; */
        if (message.type !== 0)
            writer.tag(2, WireType.Varint).int32(message.type);
        /* IRacingTools.Models.SizeI size = 10; */
        if (message.size)
            SizeI.internalBinaryWrite(message.size, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* IRacingTools.Models.PositionI position = 11; */
        if (message.position)
            PositionI.internalBinaryWrite(message.position, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IRacingTools.Models.Image
 */
export const Image = new Image$Type();
