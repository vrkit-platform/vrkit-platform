// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "Track.proto" (package "IRacingTools.Models", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { TrackType } from "./TrackTypes";
/**
 * @generated from protobuf message IRacingTools.Models.Track
 */
export interface Track {
    /**
     * WeekendInfo::trackID
     *
     * @generated from protobuf field: int32 id = 1;
     */
    id: number;
    /**
     * WeekendInfo::trackName
     *
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * WeekendInfo::trackType
     *
     * @generated from protobuf field: IRacingTools.Models.TrackType type = 3;
     */
    type: TrackType;
    /**
     * @generated from protobuf field: string display_name = 5;
     */
    displayName: string;
    /**
     * @generated from protobuf field: string display_short_name = 6;
     */
    displayShortName: string;
    /**
     * @generated from protobuf field: double altitude = 10;
     */
    altitude: number;
    /**
     * @generated from protobuf field: double latitude = 11;
     */
    latitude: number;
    /**
     * @generated from protobuf field: double longitude = 12;
     */
    longitude: number;
    /**
     * @generated from protobuf field: string north_offset = 15;
     */
    northOffset: string;
    /**
     * @generated from protobuf field: string country = 20;
     */
    country: string;
    /**
     * @generated from protobuf field: string city = 21;
     */
    city: string;
    /**
     * @generated from protobuf field: int32 pit_speed_limit = 50;
     */
    pitSpeedLimit: number;
    /**
     * @generated from protobuf field: repeated IRacingTools.Models.Track.Layout layouts = 60;
     */
    layouts: Track_Layout[];
}
/**
 * @generated from protobuf message IRacingTools.Models.Track.Layout
 */
export interface Track_Layout {
    /**
     * `id` is a compound key that we generate when processing IBT files
     *
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * Reference to `Track::id`
     *
     * @generated from protobuf field: int32 track_id = 2;
     */
    trackId: number;
    /**
     * `WeekendInfo::trackConfigName`
     *
     * @generated from protobuf field: string name = 5;
     */
    name: string;
    /**
     * @generated from protobuf field: string length = 10;
     */
    length: string;
    /**
     * @generated from protobuf field: string length_official = 11;
     */
    lengthOfficial: string;
    /**
     * @generated from protobuf field: int32 num_turns = 15;
     */
    numTurns: number;
    /**
     * @generated from protobuf field: string direction = 16;
     */
    direction: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class Track$Type extends MessageType<Track> {
    constructor() {
        super("IRacingTools.Models.Track", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "type", kind: "enum", T: () => ["IRacingTools.Models.TrackType", TrackType, "TRACK_TYPE_"] },
            { no: 5, name: "display_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "display_short_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "altitude", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 11, name: "latitude", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 12, name: "longitude", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 15, name: "north_offset", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 20, name: "country", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 21, name: "city", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 50, name: "pit_speed_limit", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 60, name: "layouts", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Track_Layout }
        ]);
    }
    create(value?: PartialMessage<Track>): Track {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.name = "";
        message.type = 0;
        message.displayName = "";
        message.displayShortName = "";
        message.altitude = 0;
        message.latitude = 0;
        message.longitude = 0;
        message.northOffset = "";
        message.country = "";
        message.city = "";
        message.pitSpeedLimit = 0;
        message.layouts = [];
        if (value !== undefined)
            reflectionMergePartial<Track>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Track): Track {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* IRacingTools.Models.TrackType type */ 3:
                    message.type = reader.int32();
                    break;
                case /* string display_name */ 5:
                    message.displayName = reader.string();
                    break;
                case /* string display_short_name */ 6:
                    message.displayShortName = reader.string();
                    break;
                case /* double altitude */ 10:
                    message.altitude = reader.double();
                    break;
                case /* double latitude */ 11:
                    message.latitude = reader.double();
                    break;
                case /* double longitude */ 12:
                    message.longitude = reader.double();
                    break;
                case /* string north_offset */ 15:
                    message.northOffset = reader.string();
                    break;
                case /* string country */ 20:
                    message.country = reader.string();
                    break;
                case /* string city */ 21:
                    message.city = reader.string();
                    break;
                case /* int32 pit_speed_limit */ 50:
                    message.pitSpeedLimit = reader.int32();
                    break;
                case /* repeated IRacingTools.Models.Track.Layout layouts */ 60:
                    message.layouts.push(Track_Layout.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Track, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* IRacingTools.Models.TrackType type = 3; */
        if (message.type !== 0)
            writer.tag(3, WireType.Varint).int32(message.type);
        /* string display_name = 5; */
        if (message.displayName !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.displayName);
        /* string display_short_name = 6; */
        if (message.displayShortName !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.displayShortName);
        /* double altitude = 10; */
        if (message.altitude !== 0)
            writer.tag(10, WireType.Bit64).double(message.altitude);
        /* double latitude = 11; */
        if (message.latitude !== 0)
            writer.tag(11, WireType.Bit64).double(message.latitude);
        /* double longitude = 12; */
        if (message.longitude !== 0)
            writer.tag(12, WireType.Bit64).double(message.longitude);
        /* string north_offset = 15; */
        if (message.northOffset !== "")
            writer.tag(15, WireType.LengthDelimited).string(message.northOffset);
        /* string country = 20; */
        if (message.country !== "")
            writer.tag(20, WireType.LengthDelimited).string(message.country);
        /* string city = 21; */
        if (message.city !== "")
            writer.tag(21, WireType.LengthDelimited).string(message.city);
        /* int32 pit_speed_limit = 50; */
        if (message.pitSpeedLimit !== 0)
            writer.tag(50, WireType.Varint).int32(message.pitSpeedLimit);
        /* repeated IRacingTools.Models.Track.Layout layouts = 60; */
        for (let i = 0; i < message.layouts.length; i++)
            Track_Layout.internalBinaryWrite(message.layouts[i], writer.tag(60, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IRacingTools.Models.Track
 */
export const Track = new Track$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Track_Layout$Type extends MessageType<Track_Layout> {
    constructor() {
        super("IRacingTools.Models.Track.Layout", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "track_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "length", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "length_official", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 15, name: "num_turns", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 16, name: "direction", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Track_Layout>): Track_Layout {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.trackId = 0;
        message.name = "";
        message.length = "";
        message.lengthOfficial = "";
        message.numTurns = 0;
        message.direction = "";
        if (value !== undefined)
            reflectionMergePartial<Track_Layout>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Track_Layout): Track_Layout {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* int32 track_id */ 2:
                    message.trackId = reader.int32();
                    break;
                case /* string name */ 5:
                    message.name = reader.string();
                    break;
                case /* string length */ 10:
                    message.length = reader.string();
                    break;
                case /* string length_official */ 11:
                    message.lengthOfficial = reader.string();
                    break;
                case /* int32 num_turns */ 15:
                    message.numTurns = reader.int32();
                    break;
                case /* string direction */ 16:
                    message.direction = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Track_Layout, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* int32 track_id = 2; */
        if (message.trackId !== 0)
            writer.tag(2, WireType.Varint).int32(message.trackId);
        /* string name = 5; */
        if (message.name !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.name);
        /* string length = 10; */
        if (message.length !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.length);
        /* string length_official = 11; */
        if (message.lengthOfficial !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.lengthOfficial);
        /* int32 num_turns = 15; */
        if (message.numTurns !== 0)
            writer.tag(15, WireType.Varint).int32(message.numTurns);
        /* string direction = 16; */
        if (message.direction !== "")
            writer.tag(16, WireType.LengthDelimited).string(message.direction);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IRacingTools.Models.Track.Layout
 */
export const Track_Layout = new Track_Layout$Type();
