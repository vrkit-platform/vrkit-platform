name: App Build

on:
  workflow_dispatch:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]


#permissions:
#  contents: read

jobs:
  build:
    defaults:
      run:
        shell: pwsh
    name: ${{ matrix.os }}-${{ github.workflow }}
    environment: build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [  windows-latest ]
        include:
          - os: windows-latest
            triplet: x64-windows-static
            vcpkgCommitId: '47bf3d1ac192b3fa0feb6e6ac9c845de179eebe9'
    env:
      # Path to the solution file relative to the root of the project.
      VCPKG_DEFAULT_TRIPLET: ${{ matrix.triplet }}
      VCPKG_ROOT: ${{ github.workspace }}/vcpkg

      # Configuration type to build.
      # You can convert this to a build matrix if you need coverage of multiple configuration types.
      # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
      BUILD_PLATFORM: x64
      BUILD_CONFIGURATION: Debug

    steps:
      - uses: actions/checkout@v4

      - name: Create cache directory
        run: mkdir "$($env:HOME)\.choco-cache"

      - name: Cache Tools
        uses: actions/cache@v4
        with:
          path: |
            "~/.choco-cache"
          key: ${{ matrix.os }}-temp-cache

      - name: Use Node v22
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: "yarn"

      - name: "Node Install Deps"
        shell: bash
        working-directory: ${{ github.workspace }}
        run: |
          echo "network-timeout 240000" > ~/.yarnrc
          echo "registry=https://registry.npmjs.org/" > ~/.npmrc
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" >> ~/.npmrc
          echo "script-shell=C:\\Program Files\\git\\bin\\bash.exe" >> ~/.npmrc
          echo "@mui:registry=https://registry.npmjs.org/" >> ~/.npmrc
          echo "@awesome.me:registry=https://npm.fontawesome.com/" >> ~/.npmrc
          echo "@fortawesome:registry=https://npm.fontawesome.com/" >> ~/.npmrc
          echo "//npm.fontawesome.com/:_authToken=${{ secrets.FONT_AWESOME_TOKEN }}" >> ~/.npmrc
          
          echo "network-timeout 240000" > .yarnrc
          echo "registry=https://registry.npmjs.org/" > .npmrc
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" >> .npmrc
          echo "script-shell=C:\\Program Files\\git\\bin\\bash.exe" >> .npmrc
          echo "@mui:registry=https://registry.npmjs.org/" >> .npmrc
          echo "@awesome.me:registry=https://npm.fontawesome.com/" >> .npmrc
          echo "@fortawesome:registry=https://npm.fontawesome.com/" >> .npmrc
          echo "//npm.fontawesome.com/:_authToken=${{ secrets.FONT_AWESOME_TOKEN }}" >> .npmrc
          yarn install --frozen-lockfile

      - name: Set Choco cache path
        run: choco config set cacheLocation "$($env:LOCALAPPDATA)\choco-cache"

      - name: Install doxygen
        run: choco install doxygen.install


      - name: get-cmake
        uses: lukka/get-cmake@v3.31.5

      - name: Run vcpkg
        uses: lukka/run-vcpkg@v11
        with:
          # Just install vcpkg for now, do not install any ports in this step yet.
          runVcpkgInstall: false

          # Location of the vcpkg as submodule of the repository.
          vcpkgDirectory: '${{ github.workspace }}/vcpkg'
          vcpkgGitCommitId: '${{ matrix.vcpkgCommitId }}'
          vcpkgJsonGlob: '**/vcpkg.json'


      - name: 'CMake Configure'
        uses: lukka/run-cmake@v10
        with:
          configurePreset: 'ninja'
          cmakeListsTxtPath: '${{ github.workspace }}/CMakeLists.txt'

      - name: 'CMake Build'
        uses: lukka/run-cmake@v10
        with:
          buildPreset: 'ninja-release-preset'
          cmakeListsTxtPath: '${{ github.workspace }}/CMakeLists.txt'

      - name: 'Package & Build Electron App'
        run: |
          yarn run vrkit-app:package