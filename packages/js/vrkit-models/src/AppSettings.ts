// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "AppSettings.proto" (package "IRacingTools.Models", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { OverlayAnchor } from "./OverlayTypes";
/**
 * @generated from protobuf message IRacingTools.Models.AppSettings
 */
export interface AppSettings {
    /**
     * @generated from protobuf field: string default_dashboard_config_id = 1;
     */
    defaultDashboardConfigId: string;
    /**
     * @generated from protobuf field: bool open_dashboard_on_launch = 6;
     */
    openDashboardOnLaunch: boolean;
    /**
     * @generated from protobuf field: IRacingTools.Models.ThemeType theme_type = 2;
     */
    themeType: ThemeType;
    /**
     * @generated from protobuf field: float zoom_factor = 3;
     */
    zoomFactor: number;
    /**
     * @generated from protobuf field: bool autoconnect = 5;
     */
    autoconnect: boolean;
    /**
     * @generated from protobuf field: map<string, string> custom_accelerators = 10;
     */
    customAccelerators: {
        [key: string]: string;
    };
    /**
     * @generated from protobuf field: map<string, IRacingTools.Models.Dashboard.OverlayAnchor> overlay_anchors = 20;
     */
    overlayAnchors: {
        [key: string]: OverlayAnchor;
    };
}
/**
 * @generated from protobuf enum IRacingTools.Models.ThemeType
 */
export enum ThemeType {
    /**
     * @generated from protobuf enum value: AUTO = 0;
     */
    AUTO = 0,
    /**
     * @generated from protobuf enum value: LIGHT = 1;
     */
    LIGHT = 1,
    /**
     * @generated from protobuf enum value: DARK = 2;
     */
    DARK = 2
}
// @generated message type with reflection information, may provide speed optimized methods
class AppSettings$Type extends MessageType<AppSettings> {
    constructor() {
        super("IRacingTools.Models.AppSettings", [
            { no: 1, name: "default_dashboard_config_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "open_dashboard_on_launch", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "theme_type", kind: "enum", T: () => ["IRacingTools.Models.ThemeType", ThemeType] },
            { no: 3, name: "zoom_factor", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 5, name: "autoconnect", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "custom_accelerators", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } },
            { no: 20, name: "overlay_anchors", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "enum", T: () => ["IRacingTools.Models.Dashboard.OverlayAnchor", OverlayAnchor, "OVERLAY_ANCHOR_"] } }
        ]);
    }
    create(value?: PartialMessage<AppSettings>): AppSettings {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.defaultDashboardConfigId = "";
        message.openDashboardOnLaunch = false;
        message.themeType = 0;
        message.zoomFactor = 0;
        message.autoconnect = false;
        message.customAccelerators = {};
        message.overlayAnchors = {};
        if (value !== undefined)
            reflectionMergePartial<AppSettings>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AppSettings): AppSettings {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string default_dashboard_config_id */ 1:
                    message.defaultDashboardConfigId = reader.string();
                    break;
                case /* bool open_dashboard_on_launch */ 6:
                    message.openDashboardOnLaunch = reader.bool();
                    break;
                case /* IRacingTools.Models.ThemeType theme_type */ 2:
                    message.themeType = reader.int32();
                    break;
                case /* float zoom_factor */ 3:
                    message.zoomFactor = reader.float();
                    break;
                case /* bool autoconnect */ 5:
                    message.autoconnect = reader.bool();
                    break;
                case /* map<string, string> custom_accelerators */ 10:
                    this.binaryReadMap10(message.customAccelerators, reader, options);
                    break;
                case /* map<string, IRacingTools.Models.Dashboard.OverlayAnchor> overlay_anchors */ 20:
                    this.binaryReadMap20(message.overlayAnchors, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap10(map: AppSettings["customAccelerators"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof AppSettings["customAccelerators"] | undefined, val: AppSettings["customAccelerators"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field IRacingTools.Models.AppSettings.custom_accelerators");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    private binaryReadMap20(map: AppSettings["overlayAnchors"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof AppSettings["overlayAnchors"] | undefined, val: AppSettings["overlayAnchors"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.int32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field IRacingTools.Models.AppSettings.overlay_anchors");
            }
        }
        map[key ?? ""] = val ?? 0;
    }
    internalBinaryWrite(message: AppSettings, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string default_dashboard_config_id = 1; */
        if (message.defaultDashboardConfigId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.defaultDashboardConfigId);
        /* bool open_dashboard_on_launch = 6; */
        if (message.openDashboardOnLaunch !== false)
            writer.tag(6, WireType.Varint).bool(message.openDashboardOnLaunch);
        /* IRacingTools.Models.ThemeType theme_type = 2; */
        if (message.themeType !== 0)
            writer.tag(2, WireType.Varint).int32(message.themeType);
        /* float zoom_factor = 3; */
        if (message.zoomFactor !== 0)
            writer.tag(3, WireType.Bit32).float(message.zoomFactor);
        /* bool autoconnect = 5; */
        if (message.autoconnect !== false)
            writer.tag(5, WireType.Varint).bool(message.autoconnect);
        /* map<string, string> custom_accelerators = 10; */
        for (let k of globalThis.Object.keys(message.customAccelerators))
            writer.tag(10, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.customAccelerators[k]).join();
        /* map<string, IRacingTools.Models.Dashboard.OverlayAnchor> overlay_anchors = 20; */
        for (let k of globalThis.Object.keys(message.overlayAnchors))
            writer.tag(20, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.Varint).int32(message.overlayAnchors[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IRacingTools.Models.AppSettings
 */
export const AppSettings = new AppSettings$Type();
