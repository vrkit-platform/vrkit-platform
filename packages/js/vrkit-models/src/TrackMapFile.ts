// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "TrackMapFile.proto" (package "IRacingTools.Models", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Pipeline } from "./Pipeline";
import { FileInfo } from "./FileInfo";
import { TrackLayoutMetadata } from "./TrackLayoutMetadata";
/**
 * @generated from protobuf message IRacingTools.Models.TrackMapFile
 */
export interface TrackMapFile {
    /**
     * *
     * Track Layout ID
     *
     * @generated from protobuf field: IRacingTools.Models.TrackLayoutMetadata track_layout_metadata = 1;
     */
    trackLayoutMetadata?: TrackLayoutMetadata;
    /**
     * @generated from protobuf field: IRacingTools.Models.FileInfo file_info = 2;
     */
    fileInfo?: FileInfo;
    /**
     * @generated from protobuf field: IRacingTools.Models.TrackMapFile.Status status = 5;
     */
    status: TrackMapFile_Status;
    /**
     * Pipeline (i.e. TRACK_MAP)
     *
     * @generated from protobuf field: repeated IRacingTools.Models.Pipeline pipelines = 10;
     */
    pipelines: Pipeline[];
    /**
     * @generated from protobuf field: string error_details = 20;
     */
    errorDetails: string;
}
/**
 * @generated from protobuf enum IRacingTools.Models.TrackMapFile.Status
 */
export enum TrackMapFile_Status {
    /**
     * @generated from protobuf enum value: STATUS_CREATED = 0;
     */
    CREATED = 0,
    /**
     * @generated from protobuf enum value: STATUS_PROCESSING = 1;
     */
    PROCESSING = 1,
    /**
     * @generated from protobuf enum value: STATUS_AVAILABLE = 5;
     */
    AVAILABLE = 5,
    /**
     * @generated from protobuf enum value: STATUS_INVALID = 10;
     */
    INVALID = 10,
    /**
     * @generated from protobuf enum value: STATUS_ERROR = 20;
     */
    ERROR = 20
}
// @generated message type with reflection information, may provide speed optimized methods
class TrackMapFile$Type extends MessageType<TrackMapFile> {
    constructor() {
        super("IRacingTools.Models.TrackMapFile", [
            { no: 1, name: "track_layout_metadata", kind: "message", T: () => TrackLayoutMetadata },
            { no: 2, name: "file_info", kind: "message", T: () => FileInfo },
            { no: 5, name: "status", kind: "enum", T: () => ["IRacingTools.Models.TrackMapFile.Status", TrackMapFile_Status, "STATUS_"] },
            { no: 10, name: "pipelines", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Pipeline },
            { no: 20, name: "error_details", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TrackMapFile>): TrackMapFile {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.status = 0;
        message.pipelines = [];
        message.errorDetails = "";
        if (value !== undefined)
            reflectionMergePartial<TrackMapFile>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TrackMapFile): TrackMapFile {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* IRacingTools.Models.TrackLayoutMetadata track_layout_metadata */ 1:
                    message.trackLayoutMetadata = TrackLayoutMetadata.internalBinaryRead(reader, reader.uint32(), options, message.trackLayoutMetadata);
                    break;
                case /* IRacingTools.Models.FileInfo file_info */ 2:
                    message.fileInfo = FileInfo.internalBinaryRead(reader, reader.uint32(), options, message.fileInfo);
                    break;
                case /* IRacingTools.Models.TrackMapFile.Status status */ 5:
                    message.status = reader.int32();
                    break;
                case /* repeated IRacingTools.Models.Pipeline pipelines */ 10:
                    message.pipelines.push(Pipeline.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string error_details */ 20:
                    message.errorDetails = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TrackMapFile, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* IRacingTools.Models.TrackLayoutMetadata track_layout_metadata = 1; */
        if (message.trackLayoutMetadata)
            TrackLayoutMetadata.internalBinaryWrite(message.trackLayoutMetadata, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* IRacingTools.Models.FileInfo file_info = 2; */
        if (message.fileInfo)
            FileInfo.internalBinaryWrite(message.fileInfo, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* IRacingTools.Models.TrackMapFile.Status status = 5; */
        if (message.status !== 0)
            writer.tag(5, WireType.Varint).int32(message.status);
        /* repeated IRacingTools.Models.Pipeline pipelines = 10; */
        for (let i = 0; i < message.pipelines.length; i++)
            Pipeline.internalBinaryWrite(message.pipelines[i], writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* string error_details = 20; */
        if (message.errorDetails !== "")
            writer.tag(20, WireType.LengthDelimited).string(message.errorDetails);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IRacingTools.Models.TrackMapFile
 */
export const TrackMapFile = new TrackMapFile$Type();
