// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "Session/SessionState.proto" (package "IRacingTools.Models.Session", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "../google/protobuf/timestamp";
/**
 * @generated from protobuf message IRacingTools.Models.Session.SessionTiming
 */
export interface SessionTiming {
    /**
     * @generated from protobuf field: bool is_live = 1;
     */
    isLive: boolean;
    /**
     * @generated from protobuf field: bool is_valid = 2;
     */
    isValid: boolean;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp start = 10;
     */
    start?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp end = 11;
     */
    end?: Timestamp;
    /**
     * @generated from protobuf field: int64 duration = 20;
     */
    duration: bigint;
    /**
     * @generated from protobuf field: int64 position = 21;
     */
    position: bigint;
}
/**
 * @generated from protobuf message IRacingTools.Models.Session.SessionState
 */
export interface SessionState {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: IRacingTools.Models.Session.SessionType type = 2;
     */
    type: SessionType;
    /**
     * @generated from protobuf field: IRacingTools.Models.Session.SessionStatus status = 5;
     */
    status: SessionStatus;
    /**
     * @generated from protobuf field: IRacingTools.Models.Session.SessionTiming timing = 10;
     */
    timing?: SessionTiming;
    /**
     * @generated from protobuf field: string file_path = 20;
     */
    filePath: string;
    /**
     * @generated from protobuf field: string session_info_json = 90;
     */
    sessionInfoJson: string;
    /**
     * @generated from protobuf field: string session_info_yaml = 91;
     */
    sessionInfoYaml: string;
}
/**
 * @generated from protobuf enum IRacingTools.Models.Session.SessionType
 */
export enum SessionType {
    /**
     * @generated from protobuf enum value: LIVE = 0;
     */
    LIVE = 0,
    /**
     * @generated from protobuf enum value: DISK = 1;
     */
    DISK = 1
}
/**
 * @generated from protobuf enum IRacingTools.Models.Session.SessionStatus
 */
export enum SessionStatus {
    /**
     * @generated from protobuf enum value: CREATED = 0;
     */
    CREATED = 0,
    /**
     * @generated from protobuf enum value: READY = 1;
     */
    READY = 1,
    /**
     * @generated from protobuf enum value: PAUSED = 2;
     */
    PAUSED = 2,
    /**
     * @generated from protobuf enum value: RUNNING = 5;
     */
    RUNNING = 5,
    /**
     * @generated from protobuf enum value: ERROR = 10;
     */
    ERROR = 10
}
// @generated message type with reflection information, may provide speed optimized methods
class SessionTiming$Type extends MessageType<SessionTiming> {
    constructor() {
        super("IRacingTools.Models.Session.SessionTiming", [
            { no: 1, name: "is_live", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "is_valid", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "start", kind: "message", T: () => Timestamp },
            { no: 11, name: "end", kind: "message", T: () => Timestamp },
            { no: 20, name: "duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 21, name: "position", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<SessionTiming>): SessionTiming {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.isLive = false;
        message.isValid = false;
        message.duration = 0n;
        message.position = 0n;
        if (value !== undefined)
            reflectionMergePartial<SessionTiming>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SessionTiming): SessionTiming {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool is_live */ 1:
                    message.isLive = reader.bool();
                    break;
                case /* bool is_valid */ 2:
                    message.isValid = reader.bool();
                    break;
                case /* google.protobuf.Timestamp start */ 10:
                    message.start = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.start);
                    break;
                case /* google.protobuf.Timestamp end */ 11:
                    message.end = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.end);
                    break;
                case /* int64 duration */ 20:
                    message.duration = reader.int64().toBigInt();
                    break;
                case /* int64 position */ 21:
                    message.position = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SessionTiming, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool is_live = 1; */
        if (message.isLive !== false)
            writer.tag(1, WireType.Varint).bool(message.isLive);
        /* bool is_valid = 2; */
        if (message.isValid !== false)
            writer.tag(2, WireType.Varint).bool(message.isValid);
        /* google.protobuf.Timestamp start = 10; */
        if (message.start)
            Timestamp.internalBinaryWrite(message.start, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp end = 11; */
        if (message.end)
            Timestamp.internalBinaryWrite(message.end, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* int64 duration = 20; */
        if (message.duration !== 0n)
            writer.tag(20, WireType.Varint).int64(message.duration);
        /* int64 position = 21; */
        if (message.position !== 0n)
            writer.tag(21, WireType.Varint).int64(message.position);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IRacingTools.Models.Session.SessionTiming
 */
export const SessionTiming = new SessionTiming$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SessionState$Type extends MessageType<SessionState> {
    constructor() {
        super("IRacingTools.Models.Session.SessionState", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "type", kind: "enum", T: () => ["IRacingTools.Models.Session.SessionType", SessionType] },
            { no: 5, name: "status", kind: "enum", T: () => ["IRacingTools.Models.Session.SessionStatus", SessionStatus] },
            { no: 10, name: "timing", kind: "message", T: () => SessionTiming },
            { no: 20, name: "file_path", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 90, name: "session_info_json", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 91, name: "session_info_yaml", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SessionState>): SessionState {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.type = 0;
        message.status = 0;
        message.filePath = "";
        message.sessionInfoJson = "";
        message.sessionInfoYaml = "";
        if (value !== undefined)
            reflectionMergePartial<SessionState>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SessionState): SessionState {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* IRacingTools.Models.Session.SessionType type */ 2:
                    message.type = reader.int32();
                    break;
                case /* IRacingTools.Models.Session.SessionStatus status */ 5:
                    message.status = reader.int32();
                    break;
                case /* IRacingTools.Models.Session.SessionTiming timing */ 10:
                    message.timing = SessionTiming.internalBinaryRead(reader, reader.uint32(), options, message.timing);
                    break;
                case /* string file_path */ 20:
                    message.filePath = reader.string();
                    break;
                case /* string session_info_json */ 90:
                    message.sessionInfoJson = reader.string();
                    break;
                case /* string session_info_yaml */ 91:
                    message.sessionInfoYaml = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SessionState, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* IRacingTools.Models.Session.SessionType type = 2; */
        if (message.type !== 0)
            writer.tag(2, WireType.Varint).int32(message.type);
        /* IRacingTools.Models.Session.SessionStatus status = 5; */
        if (message.status !== 0)
            writer.tag(5, WireType.Varint).int32(message.status);
        /* IRacingTools.Models.Session.SessionTiming timing = 10; */
        if (message.timing)
            SessionTiming.internalBinaryWrite(message.timing, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* string file_path = 20; */
        if (message.filePath !== "")
            writer.tag(20, WireType.LengthDelimited).string(message.filePath);
        /* string session_info_json = 90; */
        if (message.sessionInfoJson !== "")
            writer.tag(90, WireType.LengthDelimited).string(message.sessionInfoJson);
        /* string session_info_yaml = 91; */
        if (message.sessionInfoYaml !== "")
            writer.tag(91, WireType.LengthDelimited).string(message.sessionInfoYaml);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IRacingTools.Models.Session.SessionState
 */
export const SessionState = new SessionState$Type();
