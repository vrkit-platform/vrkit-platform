// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "Pipeline.proto" (package "IRacingTools.Models", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message IRacingTools.Models.PipelineLog
 */
export interface PipelineLog {
    /**
     * @generated from protobuf field: IRacingTools.Models.PipelineLog.Level level = 1;
     */
    level: PipelineLog_Level;
    /**
     * @generated from protobuf field: string message = 5;
     */
    message: string;
}
/**
 * @generated from protobuf enum IRacingTools.Models.PipelineLog.Level
 */
export enum PipelineLog_Level {
    /**
     * @generated from protobuf enum value: TRACE = 0;
     */
    TRACE = 0,
    /**
     * @generated from protobuf enum value: DEBUG = 1;
     */
    DEBUG = 1,
    /**
     * @generated from protobuf enum value: INFO = 2;
     */
    INFO = 2,
    /**
     * @generated from protobuf enum value: WARN = 3;
     */
    WARN = 3,
    /**
     * @generated from protobuf enum value: ERR = 4;
     */
    ERR = 4,
    /**
     * @generated from protobuf enum value: CRITICAL = 5;
     */
    CRITICAL = 5,
    /**
     * @generated from protobuf enum value: OFF = 6;
     */
    OFF = 6
}
/**
 * @generated from protobuf message IRacingTools.Models.Pipeline
 */
export interface Pipeline {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: IRacingTools.Models.PipelineType type = 2;
     */
    type: PipelineType;
    /**
     * @generated from protobuf field: IRacingTools.Models.PipelineStatus status = 5;
     */
    status: PipelineStatus;
    /**
     * @generated from protobuf field: repeated IRacingTools.Models.Pipeline.Attempt attempts = 50;
     */
    attempts: Pipeline_Attempt[];
}
/**
 * @generated from protobuf message IRacingTools.Models.Pipeline.Attempt
 */
export interface Pipeline_Attempt {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: int64 timestamp = 2;
     */
    timestamp: bigint;
    /**
     * @generated from protobuf field: IRacingTools.Models.PipelineStatus status = 3;
     */
    status: PipelineStatus;
    /**
     * @generated from protobuf field: int32 attempt_number = 10;
     */
    attemptNumber: number;
    /**
     * @generated from protobuf field: repeated IRacingTools.Models.PipelineLog logs = 50;
     */
    logs: PipelineLog[];
}
/**
 * @generated from protobuf enum IRacingTools.Models.PipelineType
 */
export enum PipelineType {
    /**
     * @generated from protobuf enum value: PIPELINE_TYPE_TRACK_MAP = 0;
     */
    TRACK_MAP = 0
}
/**
 * @generated from protobuf enum IRacingTools.Models.PipelineStatus
 */
export enum PipelineStatus {
    /**
     * @generated from protobuf enum value: PIPELINE_STATUS_CREATED = 0;
     */
    CREATED = 0,
    /**
     * @generated from protobuf enum value: PIPELINE_STATUS_QUEUED = 1;
     */
    QUEUED = 1,
    /**
     * @generated from protobuf enum value: PIPELINE_STATUS_PROCESSING = 2;
     */
    PROCESSING = 2,
    /**
     * @generated from protobuf enum value: PIPELINE_STATUS_COMPLETE = 10;
     */
    COMPLETE = 10,
    /**
     * @generated from protobuf enum value: PIPELINE_STATUS_ERROR = 20;
     */
    ERROR = 20
}
// @generated message type with reflection information, may provide speed optimized methods
class PipelineLog$Type extends MessageType<PipelineLog> {
    constructor() {
        super("IRacingTools.Models.PipelineLog", [
            { no: 1, name: "level", kind: "enum", T: () => ["IRacingTools.Models.PipelineLog.Level", PipelineLog_Level] },
            { no: 5, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PipelineLog>): PipelineLog {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.level = 0;
        message.message = "";
        if (value !== undefined)
            reflectionMergePartial<PipelineLog>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PipelineLog): PipelineLog {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* IRacingTools.Models.PipelineLog.Level level */ 1:
                    message.level = reader.int32();
                    break;
                case /* string message */ 5:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PipelineLog, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* IRacingTools.Models.PipelineLog.Level level = 1; */
        if (message.level !== 0)
            writer.tag(1, WireType.Varint).int32(message.level);
        /* string message = 5; */
        if (message.message !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IRacingTools.Models.PipelineLog
 */
export const PipelineLog = new PipelineLog$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Pipeline$Type extends MessageType<Pipeline> {
    constructor() {
        super("IRacingTools.Models.Pipeline", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "type", kind: "enum", T: () => ["IRacingTools.Models.PipelineType", PipelineType, "PIPELINE_TYPE_"] },
            { no: 5, name: "status", kind: "enum", T: () => ["IRacingTools.Models.PipelineStatus", PipelineStatus, "PIPELINE_STATUS_"] },
            { no: 50, name: "attempts", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Pipeline_Attempt }
        ]);
    }
    create(value?: PartialMessage<Pipeline>): Pipeline {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.type = 0;
        message.status = 0;
        message.attempts = [];
        if (value !== undefined)
            reflectionMergePartial<Pipeline>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Pipeline): Pipeline {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* IRacingTools.Models.PipelineType type */ 2:
                    message.type = reader.int32();
                    break;
                case /* IRacingTools.Models.PipelineStatus status */ 5:
                    message.status = reader.int32();
                    break;
                case /* repeated IRacingTools.Models.Pipeline.Attempt attempts */ 50:
                    message.attempts.push(Pipeline_Attempt.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Pipeline, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* IRacingTools.Models.PipelineType type = 2; */
        if (message.type !== 0)
            writer.tag(2, WireType.Varint).int32(message.type);
        /* IRacingTools.Models.PipelineStatus status = 5; */
        if (message.status !== 0)
            writer.tag(5, WireType.Varint).int32(message.status);
        /* repeated IRacingTools.Models.Pipeline.Attempt attempts = 50; */
        for (let i = 0; i < message.attempts.length; i++)
            Pipeline_Attempt.internalBinaryWrite(message.attempts[i], writer.tag(50, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IRacingTools.Models.Pipeline
 */
export const Pipeline = new Pipeline$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Pipeline_Attempt$Type extends MessageType<Pipeline_Attempt> {
    constructor() {
        super("IRacingTools.Models.Pipeline.Attempt", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "timestamp", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "status", kind: "enum", T: () => ["IRacingTools.Models.PipelineStatus", PipelineStatus, "PIPELINE_STATUS_"] },
            { no: 10, name: "attempt_number", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 50, name: "logs", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PipelineLog }
        ]);
    }
    create(value?: PartialMessage<Pipeline_Attempt>): Pipeline_Attempt {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.timestamp = 0n;
        message.status = 0;
        message.attemptNumber = 0;
        message.logs = [];
        if (value !== undefined)
            reflectionMergePartial<Pipeline_Attempt>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Pipeline_Attempt): Pipeline_Attempt {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* int64 timestamp */ 2:
                    message.timestamp = reader.int64().toBigInt();
                    break;
                case /* IRacingTools.Models.PipelineStatus status */ 3:
                    message.status = reader.int32();
                    break;
                case /* int32 attempt_number */ 10:
                    message.attemptNumber = reader.int32();
                    break;
                case /* repeated IRacingTools.Models.PipelineLog logs */ 50:
                    message.logs.push(PipelineLog.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Pipeline_Attempt, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* int64 timestamp = 2; */
        if (message.timestamp !== 0n)
            writer.tag(2, WireType.Varint).int64(message.timestamp);
        /* IRacingTools.Models.PipelineStatus status = 3; */
        if (message.status !== 0)
            writer.tag(3, WireType.Varint).int32(message.status);
        /* int32 attempt_number = 10; */
        if (message.attemptNumber !== 0)
            writer.tag(10, WireType.Varint).int32(message.attemptNumber);
        /* repeated IRacingTools.Models.PipelineLog logs = 50; */
        for (let i = 0; i < message.logs.length; i++)
            PipelineLog.internalBinaryWrite(message.logs[i], writer.tag(50, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IRacingTools.Models.Pipeline.Attempt
 */
export const Pipeline_Attempt = new Pipeline_Attempt$Type();
