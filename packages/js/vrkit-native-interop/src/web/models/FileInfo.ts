// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "FileInfo.proto" (package "IRacingTools.Models", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message IRacingTools.Models.FileInfo
 */
export interface FileInfo {
    /**
     * @generated from protobuf field: string file = 1;
     */
    file: string;
    /**
     * @generated from protobuf field: string filename = 2;
     */
    filename: string;
    /**
     * @generated from protobuf field: string parent_dir = 3;
     */
    parentDir: string;
    /**
     * @generated from protobuf field: bool is_deleted = 5;
     */
    isDeleted: boolean;
    /**
     * @generated from protobuf field: int64 created_at = 10;
     */
    createdAt: bigint;
    /**
     * @generated from protobuf field: int64 modified_at = 11;
     */
    modifiedAt: bigint;
}
// @generated message type with reflection information, may provide speed optimized methods
class FileInfo$Type extends MessageType<FileInfo> {
    constructor() {
        super("IRacingTools.Models.FileInfo", [
            { no: 1, name: "file", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "filename", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "parent_dir", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "is_deleted", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "created_at", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 11, name: "modified_at", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<FileInfo>): FileInfo {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.file = "";
        message.filename = "";
        message.parentDir = "";
        message.isDeleted = false;
        message.createdAt = 0n;
        message.modifiedAt = 0n;
        if (value !== undefined)
            reflectionMergePartial<FileInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FileInfo): FileInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string file */ 1:
                    message.file = reader.string();
                    break;
                case /* string filename */ 2:
                    message.filename = reader.string();
                    break;
                case /* string parent_dir */ 3:
                    message.parentDir = reader.string();
                    break;
                case /* bool is_deleted */ 5:
                    message.isDeleted = reader.bool();
                    break;
                case /* int64 created_at */ 10:
                    message.createdAt = reader.int64().toBigInt();
                    break;
                case /* int64 modified_at */ 11:
                    message.modifiedAt = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FileInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string file = 1; */
        if (message.file !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.file);
        /* string filename = 2; */
        if (message.filename !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.filename);
        /* string parent_dir = 3; */
        if (message.parentDir !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.parentDir);
        /* bool is_deleted = 5; */
        if (message.isDeleted !== false)
            writer.tag(5, WireType.Varint).bool(message.isDeleted);
        /* int64 created_at = 10; */
        if (message.createdAt !== 0n)
            writer.tag(10, WireType.Varint).int64(message.createdAt);
        /* int64 modified_at = 11; */
        if (message.modifiedAt !== 0n)
            writer.tag(11, WireType.Varint).int64(message.modifiedAt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IRacingTools.Models.FileInfo
 */
export const FileInfo = new FileInfo$Type();
