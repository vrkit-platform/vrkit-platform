// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "PluginManifest.proto" (package "IRacingTools.Models", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { SizeI } from "./Geometry";
import { SupportedGame } from "./AppInterfaceTypes";
/**
 * @generated from protobuf message IRacingTools.Models.PluginUserSettingValue
 */
export interface PluginUserSettingValue {
    /**
     * @generated from protobuf field: int32 int_value = 1;
     */
    intValue: number;
    /**
     * @generated from protobuf field: double double_value = 2;
     */
    doubleValue: number;
    /**
     * @generated from protobuf field: string string_value = 3;
     */
    stringValue: string;
    /**
     * @generated from protobuf field: bool boolean_value = 4;
     */
    booleanValue: boolean;
    /**
     * @generated from protobuf field: string color_value = 5;
     */
    colorValue: string;
}
/**
 * @generated from protobuf message IRacingTools.Models.PluginUserSetting
 */
export interface PluginUserSetting {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string description = 3;
     */
    description: string;
    /**
     * @generated from protobuf field: IRacingTools.Models.PluginUserSettingType type = 4;
     */
    type: PluginUserSettingType;
    /**
     * @generated from protobuf field: IRacingTools.Models.PluginUserSettingValue default_value = 10;
     */
    defaultValue?: PluginUserSettingValue;
    /**
     * @generated from protobuf field: IRacingTools.Models.PluginUserSettingValue user_value = 20;
     */
    userValue?: PluginUserSettingValue;
}
/**
 * @generated from protobuf message IRacingTools.Models.PluginComponentDefinition
 */
export interface PluginComponentDefinition {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: IRacingTools.Models.PluginComponentType type = 2;
     */
    type: PluginComponentType;
    /**
     * @generated from protobuf field: string name = 5;
     */
    name: string;
    /**
     * @generated from protobuf field: string description = 6;
     */
    description: string;
    /**
     * @generated from protobuf field: repeated IRacingTools.Models.SupportedGame supported_games = 10;
     */
    supportedGames: SupportedGame[];
    /**
     * *
     * Common parameters irrespective of game or component type
     *
     * @generated from protobuf field: map<string, string> common_parameters = 15;
     */
    commonParameters: {
        [key: string]: string;
    };
    /**
     * @generated from protobuf field: IRacingTools.Models.PluginComponentDefinition.OverlayCommonSettings overlay_common_settings = 20;
     */
    overlayCommonSettings?: PluginComponentDefinition_OverlayCommonSettings;
    /**
     * IROverlaySettings, can be omitted
     *
     * @generated from protobuf field: IRacingTools.Models.PluginComponentDefinition.OverlayIRacingSettings overlay_iracing_settings = 21;
     */
    overlayIracingSettings?: PluginComponentDefinition_OverlayIRacingSettings;
    /**
     * @generated from protobuf field: map<string, IRacingTools.Models.PluginUserSetting> user_settings = 99;
     */
    userSettings: {
        [key: string]: PluginUserSetting;
    };
}
/**
 * *
 * Common Overlay specific settings
 *
 * @generated from protobuf message IRacingTools.Models.PluginComponentDefinition.OverlayCommonSettings
 */
export interface PluginComponentDefinition_OverlayCommonSettings {
    /**
     * FPS OVERRIDING USER/APP CONFIGURED
     * < 1: USER/APP ARE USED TO CONFIGURE,
     * DEFAULT VALUE (0) USES THE INTERNAL DEFAULT OF 10FPS
     *
     * @generated from protobuf field: int32 fps = 1;
     */
    fps: number;
    /**
     * THIS IS REQUIRED
     *
     * @generated from protobuf field: IRacingTools.Models.SizeI initial_size = 2;
     */
    initialSize?: SizeI;
    /**
     * THE ACTUAL ASPECT RATIO IS EXTRAPOLATED FROM
     * `initial_size` PROVIDED
     *
     * @generated from protobuf field: bool force_aspect_ratio = 3;
     */
    forceAspectRatio: boolean;
    /**
     * CAN THE OVERLAY BE RESIZED
     *
     * @generated from protobuf field: bool can_resize = 4;
     */
    canResize: boolean;
    /**
     * VISIBLE REGARDLESS OF AN ACTIVE GAME RUNNING
     *
     * @generated from protobuf field: bool visible_without_connection = 5;
     */
    visibleWithoutConnection: boolean;
}
/**
 * *
 * IRacing Overlay specific settings
 *
 * @generated from protobuf message IRacingTools.Models.PluginComponentDefinition.OverlayIRacingSettings
 */
export interface PluginComponentDefinition_OverlayIRacingSettings {
    /**
     * @generated from protobuf field: repeated string data_variables_used = 5;
     */
    dataVariablesUsed: string[];
    /**
     * @generated from protobuf field: map<string, string> parameters = 10;
     */
    parameters: {
        [key: string]: string;
    };
}
/**
 * *
 * Owner (contact info) of plugin
 *
 * @generated from protobuf message IRacingTools.Models.PluginOwner
 */
export interface PluginOwner {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: string company = 2;
     */
    company: string;
    /**
     * @generated from protobuf field: string email = 5;
     */
    email: string;
    /**
     * @generated from protobuf field: string url = 10;
     */
    url: string;
    /**
     * @generated from protobuf field: string support_url = 11;
     */
    supportUrl: string;
}
/**
 * *
 * Defines a plugins contents
 *
 * @generated from protobuf message IRacingTools.Models.PluginManifest
 */
export interface PluginManifest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string name = 5;
     */
    name: string;
    /**
     * @generated from protobuf field: string description = 6;
     */
    description: string;
    /**
     * @generated from protobuf field: IRacingTools.Models.PluginOwner owner = 10;
     */
    owner?: PluginOwner;
    /**
     * @generated from protobuf field: repeated IRacingTools.Models.PluginComponentDefinition components = 20;
     */
    components: PluginComponentDefinition[];
}
/**
 * *
 * Installed plugin
 *
 * @generated from protobuf message IRacingTools.Models.PluginInstall
 */
export interface PluginInstall {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: IRacingTools.Models.PluginInstallStatus status = 2;
     */
    status: PluginInstallStatus;
    /**
     * @generated from protobuf field: bool is_internal = 3;
     */
    isInternal: boolean;
    /**
     * @generated from protobuf field: string path = 5;
     */
    path: string;
    /**
     * @generated from protobuf field: string manifest_file = 10;
     */
    manifestFile: string;
    /**
     * @generated from protobuf field: IRacingTools.Models.PluginManifest manifest = 11;
     */
    manifest?: PluginManifest;
}
/**
 * @generated from protobuf enum IRacingTools.Models.PluginUserSettingType
 */
export enum PluginUserSettingType {
    /**
     * @generated from protobuf enum value: PLUGIN_USER_SETTING_TYPE_INT = 0;
     */
    INT = 0,
    /**
     * @generated from protobuf enum value: PLUGIN_USER_SETTING_TYPE_DOUBLE = 1;
     */
    DOUBLE = 1,
    /**
     * @generated from protobuf enum value: PLUGIN_USER_SETTING_TYPE_STRING = 2;
     */
    STRING = 2,
    /**
     * @generated from protobuf enum value: PLUGIN_USER_SETTING_TYPE_BOOLEAN = 3;
     */
    BOOLEAN = 3,
    /**
     * @generated from protobuf enum value: PLUGIN_USER_SETTING_TYPE_COLOR = 4;
     */
    COLOR = 4
}
/**
 * @generated from protobuf enum IRacingTools.Models.PluginComponentType
 */
export enum PluginComponentType {
    /**
     * @generated from protobuf enum value: PLUGIN_COMPONENT_TYPE_OVERLAY = 0;
     */
    OVERLAY = 0
}
/**
 * *
 * Status of a plugin installation
 *
 * @generated from protobuf enum IRacingTools.Models.PluginInstallStatus
 */
export enum PluginInstallStatus {
    /**
     * @generated from protobuf enum value: PLUGIN_STATUS_NONE = 0;
     */
    PLUGIN_STATUS_NONE = 0,
    /**
     * FOR A LATER DATE WHEN BROWSE, DOWNLOAD, INSTALL
     * COULD ALL BE DONE IN APP
     *
     * @generated from protobuf enum value: PLUGIN_STATUS_DOWNLOADING = 1;
     */
    PLUGIN_STATUS_DOWNLOADING = 1,
    /**
     * @generated from protobuf enum value: PLUGIN_STATUS_AVAILABLE = 2;
     */
    PLUGIN_STATUS_AVAILABLE = 2,
    /**
     * @generated from protobuf enum value: PLUGIN_STATUS_LOADED = 5;
     */
    PLUGIN_STATUS_LOADED = 5,
    /**
     * @generated from protobuf enum value: PLUGIN_STATUS_ERROR = 50;
     */
    PLUGIN_STATUS_ERROR = 50,
    /**
     * @generated from protobuf enum value: PLUGIN_STATUS_DISABLED = 98;
     */
    PLUGIN_STATUS_DISABLED = 98,
    /**
     * @generated from protobuf enum value: PLUGIN_STATUS_IGNORED = 99;
     */
    PLUGIN_STATUS_IGNORED = 99
}
// @generated message type with reflection information, may provide speed optimized methods
class PluginUserSettingValue$Type extends MessageType<PluginUserSettingValue> {
    constructor() {
        super("IRacingTools.Models.PluginUserSettingValue", [
            { no: 1, name: "int_value", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "double_value", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 3, name: "string_value", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "boolean_value", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "color_value", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PluginUserSettingValue>): PluginUserSettingValue {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.intValue = 0;
        message.doubleValue = 0;
        message.stringValue = "";
        message.booleanValue = false;
        message.colorValue = "";
        if (value !== undefined)
            reflectionMergePartial<PluginUserSettingValue>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PluginUserSettingValue): PluginUserSettingValue {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 int_value */ 1:
                    message.intValue = reader.int32();
                    break;
                case /* double double_value */ 2:
                    message.doubleValue = reader.double();
                    break;
                case /* string string_value */ 3:
                    message.stringValue = reader.string();
                    break;
                case /* bool boolean_value */ 4:
                    message.booleanValue = reader.bool();
                    break;
                case /* string color_value */ 5:
                    message.colorValue = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PluginUserSettingValue, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 int_value = 1; */
        if (message.intValue !== 0)
            writer.tag(1, WireType.Varint).int32(message.intValue);
        /* double double_value = 2; */
        if (message.doubleValue !== 0)
            writer.tag(2, WireType.Bit64).double(message.doubleValue);
        /* string string_value = 3; */
        if (message.stringValue !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.stringValue);
        /* bool boolean_value = 4; */
        if (message.booleanValue !== false)
            writer.tag(4, WireType.Varint).bool(message.booleanValue);
        /* string color_value = 5; */
        if (message.colorValue !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.colorValue);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IRacingTools.Models.PluginUserSettingValue
 */
export const PluginUserSettingValue = new PluginUserSettingValue$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PluginUserSetting$Type extends MessageType<PluginUserSetting> {
    constructor() {
        super("IRacingTools.Models.PluginUserSetting", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "type", kind: "enum", T: () => ["IRacingTools.Models.PluginUserSettingType", PluginUserSettingType, "PLUGIN_USER_SETTING_TYPE_"] },
            { no: 10, name: "default_value", kind: "message", T: () => PluginUserSettingValue },
            { no: 20, name: "user_value", kind: "message", T: () => PluginUserSettingValue }
        ]);
    }
    create(value?: PartialMessage<PluginUserSetting>): PluginUserSetting {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.name = "";
        message.description = "";
        message.type = 0;
        if (value !== undefined)
            reflectionMergePartial<PluginUserSetting>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PluginUserSetting): PluginUserSetting {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string description */ 3:
                    message.description = reader.string();
                    break;
                case /* IRacingTools.Models.PluginUserSettingType type */ 4:
                    message.type = reader.int32();
                    break;
                case /* IRacingTools.Models.PluginUserSettingValue default_value */ 10:
                    message.defaultValue = PluginUserSettingValue.internalBinaryRead(reader, reader.uint32(), options, message.defaultValue);
                    break;
                case /* IRacingTools.Models.PluginUserSettingValue user_value */ 20:
                    message.userValue = PluginUserSettingValue.internalBinaryRead(reader, reader.uint32(), options, message.userValue);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PluginUserSetting, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string description = 3; */
        if (message.description !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.description);
        /* IRacingTools.Models.PluginUserSettingType type = 4; */
        if (message.type !== 0)
            writer.tag(4, WireType.Varint).int32(message.type);
        /* IRacingTools.Models.PluginUserSettingValue default_value = 10; */
        if (message.defaultValue)
            PluginUserSettingValue.internalBinaryWrite(message.defaultValue, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* IRacingTools.Models.PluginUserSettingValue user_value = 20; */
        if (message.userValue)
            PluginUserSettingValue.internalBinaryWrite(message.userValue, writer.tag(20, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IRacingTools.Models.PluginUserSetting
 */
export const PluginUserSetting = new PluginUserSetting$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PluginComponentDefinition$Type extends MessageType<PluginComponentDefinition> {
    constructor() {
        super("IRacingTools.Models.PluginComponentDefinition", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "type", kind: "enum", T: () => ["IRacingTools.Models.PluginComponentType", PluginComponentType, "PLUGIN_COMPONENT_TYPE_"] },
            { no: 5, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "supported_games", kind: "enum", repeat: 1 /*RepeatType.PACKED*/, T: () => ["IRacingTools.Models.SupportedGame", SupportedGame, "SUPPORTED_GAME_"] },
            { no: 15, name: "common_parameters", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } },
            { no: 20, name: "overlay_common_settings", kind: "message", T: () => PluginComponentDefinition_OverlayCommonSettings },
            { no: 21, name: "overlay_iracing_settings", kind: "message", T: () => PluginComponentDefinition_OverlayIRacingSettings },
            { no: 99, name: "user_settings", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => PluginUserSetting } }
        ]);
    }
    create(value?: PartialMessage<PluginComponentDefinition>): PluginComponentDefinition {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.type = 0;
        message.name = "";
        message.description = "";
        message.supportedGames = [];
        message.commonParameters = {};
        message.userSettings = {};
        if (value !== undefined)
            reflectionMergePartial<PluginComponentDefinition>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PluginComponentDefinition): PluginComponentDefinition {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* IRacingTools.Models.PluginComponentType type */ 2:
                    message.type = reader.int32();
                    break;
                case /* string name */ 5:
                    message.name = reader.string();
                    break;
                case /* string description */ 6:
                    message.description = reader.string();
                    break;
                case /* repeated IRacingTools.Models.SupportedGame supported_games */ 10:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.supportedGames.push(reader.int32());
                    else
                        message.supportedGames.push(reader.int32());
                    break;
                case /* map<string, string> common_parameters */ 15:
                    this.binaryReadMap15(message.commonParameters, reader, options);
                    break;
                case /* IRacingTools.Models.PluginComponentDefinition.OverlayCommonSettings overlay_common_settings */ 20:
                    message.overlayCommonSettings = PluginComponentDefinition_OverlayCommonSettings.internalBinaryRead(reader, reader.uint32(), options, message.overlayCommonSettings);
                    break;
                case /* IRacingTools.Models.PluginComponentDefinition.OverlayIRacingSettings overlay_iracing_settings */ 21:
                    message.overlayIracingSettings = PluginComponentDefinition_OverlayIRacingSettings.internalBinaryRead(reader, reader.uint32(), options, message.overlayIracingSettings);
                    break;
                case /* map<string, IRacingTools.Models.PluginUserSetting> user_settings */ 99:
                    this.binaryReadMap99(message.userSettings, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap15(map: PluginComponentDefinition["commonParameters"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof PluginComponentDefinition["commonParameters"] | undefined, val: PluginComponentDefinition["commonParameters"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field IRacingTools.Models.PluginComponentDefinition.common_parameters");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    private binaryReadMap99(map: PluginComponentDefinition["userSettings"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof PluginComponentDefinition["userSettings"] | undefined, val: PluginComponentDefinition["userSettings"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = PluginUserSetting.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field IRacingTools.Models.PluginComponentDefinition.user_settings");
            }
        }
        map[key ?? ""] = val ?? PluginUserSetting.create();
    }
    internalBinaryWrite(message: PluginComponentDefinition, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* IRacingTools.Models.PluginComponentType type = 2; */
        if (message.type !== 0)
            writer.tag(2, WireType.Varint).int32(message.type);
        /* string name = 5; */
        if (message.name !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.name);
        /* string description = 6; */
        if (message.description !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.description);
        /* repeated IRacingTools.Models.SupportedGame supported_games = 10; */
        if (message.supportedGames.length) {
            writer.tag(10, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.supportedGames.length; i++)
                writer.int32(message.supportedGames[i]);
            writer.join();
        }
        /* map<string, string> common_parameters = 15; */
        for (let k of globalThis.Object.keys(message.commonParameters))
            writer.tag(15, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.commonParameters[k]).join();
        /* IRacingTools.Models.PluginComponentDefinition.OverlayCommonSettings overlay_common_settings = 20; */
        if (message.overlayCommonSettings)
            PluginComponentDefinition_OverlayCommonSettings.internalBinaryWrite(message.overlayCommonSettings, writer.tag(20, WireType.LengthDelimited).fork(), options).join();
        /* IRacingTools.Models.PluginComponentDefinition.OverlayIRacingSettings overlay_iracing_settings = 21; */
        if (message.overlayIracingSettings)
            PluginComponentDefinition_OverlayIRacingSettings.internalBinaryWrite(message.overlayIracingSettings, writer.tag(21, WireType.LengthDelimited).fork(), options).join();
        /* map<string, IRacingTools.Models.PluginUserSetting> user_settings = 99; */
        for (let k of globalThis.Object.keys(message.userSettings)) {
            writer.tag(99, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            PluginUserSetting.internalBinaryWrite(message.userSettings[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IRacingTools.Models.PluginComponentDefinition
 */
export const PluginComponentDefinition = new PluginComponentDefinition$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PluginComponentDefinition_OverlayCommonSettings$Type extends MessageType<PluginComponentDefinition_OverlayCommonSettings> {
    constructor() {
        super("IRacingTools.Models.PluginComponentDefinition.OverlayCommonSettings", [
            { no: 1, name: "fps", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "initial_size", kind: "message", T: () => SizeI },
            { no: 3, name: "force_aspect_ratio", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "can_resize", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "visible_without_connection", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<PluginComponentDefinition_OverlayCommonSettings>): PluginComponentDefinition_OverlayCommonSettings {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.fps = 0;
        message.forceAspectRatio = false;
        message.canResize = false;
        message.visibleWithoutConnection = false;
        if (value !== undefined)
            reflectionMergePartial<PluginComponentDefinition_OverlayCommonSettings>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PluginComponentDefinition_OverlayCommonSettings): PluginComponentDefinition_OverlayCommonSettings {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 fps */ 1:
                    message.fps = reader.int32();
                    break;
                case /* IRacingTools.Models.SizeI initial_size */ 2:
                    message.initialSize = SizeI.internalBinaryRead(reader, reader.uint32(), options, message.initialSize);
                    break;
                case /* bool force_aspect_ratio */ 3:
                    message.forceAspectRatio = reader.bool();
                    break;
                case /* bool can_resize */ 4:
                    message.canResize = reader.bool();
                    break;
                case /* bool visible_without_connection */ 5:
                    message.visibleWithoutConnection = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PluginComponentDefinition_OverlayCommonSettings, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 fps = 1; */
        if (message.fps !== 0)
            writer.tag(1, WireType.Varint).int32(message.fps);
        /* IRacingTools.Models.SizeI initial_size = 2; */
        if (message.initialSize)
            SizeI.internalBinaryWrite(message.initialSize, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bool force_aspect_ratio = 3; */
        if (message.forceAspectRatio !== false)
            writer.tag(3, WireType.Varint).bool(message.forceAspectRatio);
        /* bool can_resize = 4; */
        if (message.canResize !== false)
            writer.tag(4, WireType.Varint).bool(message.canResize);
        /* bool visible_without_connection = 5; */
        if (message.visibleWithoutConnection !== false)
            writer.tag(5, WireType.Varint).bool(message.visibleWithoutConnection);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IRacingTools.Models.PluginComponentDefinition.OverlayCommonSettings
 */
export const PluginComponentDefinition_OverlayCommonSettings = new PluginComponentDefinition_OverlayCommonSettings$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PluginComponentDefinition_OverlayIRacingSettings$Type extends MessageType<PluginComponentDefinition_OverlayIRacingSettings> {
    constructor() {
        super("IRacingTools.Models.PluginComponentDefinition.OverlayIRacingSettings", [
            { no: 5, name: "data_variables_used", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "parameters", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } }
        ]);
    }
    create(value?: PartialMessage<PluginComponentDefinition_OverlayIRacingSettings>): PluginComponentDefinition_OverlayIRacingSettings {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.dataVariablesUsed = [];
        message.parameters = {};
        if (value !== undefined)
            reflectionMergePartial<PluginComponentDefinition_OverlayIRacingSettings>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PluginComponentDefinition_OverlayIRacingSettings): PluginComponentDefinition_OverlayIRacingSettings {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string data_variables_used */ 5:
                    message.dataVariablesUsed.push(reader.string());
                    break;
                case /* map<string, string> parameters */ 10:
                    this.binaryReadMap10(message.parameters, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap10(map: PluginComponentDefinition_OverlayIRacingSettings["parameters"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof PluginComponentDefinition_OverlayIRacingSettings["parameters"] | undefined, val: PluginComponentDefinition_OverlayIRacingSettings["parameters"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field IRacingTools.Models.PluginComponentDefinition.OverlayIRacingSettings.parameters");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: PluginComponentDefinition_OverlayIRacingSettings, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string data_variables_used = 5; */
        for (let i = 0; i < message.dataVariablesUsed.length; i++)
            writer.tag(5, WireType.LengthDelimited).string(message.dataVariablesUsed[i]);
        /* map<string, string> parameters = 10; */
        for (let k of globalThis.Object.keys(message.parameters))
            writer.tag(10, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.parameters[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IRacingTools.Models.PluginComponentDefinition.OverlayIRacingSettings
 */
export const PluginComponentDefinition_OverlayIRacingSettings = new PluginComponentDefinition_OverlayIRacingSettings$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PluginOwner$Type extends MessageType<PluginOwner> {
    constructor() {
        super("IRacingTools.Models.PluginOwner", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "company", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "support_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PluginOwner>): PluginOwner {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.company = "";
        message.email = "";
        message.url = "";
        message.supportUrl = "";
        if (value !== undefined)
            reflectionMergePartial<PluginOwner>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PluginOwner): PluginOwner {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string company */ 2:
                    message.company = reader.string();
                    break;
                case /* string email */ 5:
                    message.email = reader.string();
                    break;
                case /* string url */ 10:
                    message.url = reader.string();
                    break;
                case /* string support_url */ 11:
                    message.supportUrl = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PluginOwner, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string company = 2; */
        if (message.company !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.company);
        /* string email = 5; */
        if (message.email !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.email);
        /* string url = 10; */
        if (message.url !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.url);
        /* string support_url = 11; */
        if (message.supportUrl !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.supportUrl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IRacingTools.Models.PluginOwner
 */
export const PluginOwner = new PluginOwner$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PluginManifest$Type extends MessageType<PluginManifest> {
    constructor() {
        super("IRacingTools.Models.PluginManifest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "owner", kind: "message", T: () => PluginOwner },
            { no: 20, name: "components", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PluginComponentDefinition }
        ]);
    }
    create(value?: PartialMessage<PluginManifest>): PluginManifest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.name = "";
        message.description = "";
        message.components = [];
        if (value !== undefined)
            reflectionMergePartial<PluginManifest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PluginManifest): PluginManifest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string name */ 5:
                    message.name = reader.string();
                    break;
                case /* string description */ 6:
                    message.description = reader.string();
                    break;
                case /* IRacingTools.Models.PluginOwner owner */ 10:
                    message.owner = PluginOwner.internalBinaryRead(reader, reader.uint32(), options, message.owner);
                    break;
                case /* repeated IRacingTools.Models.PluginComponentDefinition components */ 20:
                    message.components.push(PluginComponentDefinition.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PluginManifest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string name = 5; */
        if (message.name !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.name);
        /* string description = 6; */
        if (message.description !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.description);
        /* IRacingTools.Models.PluginOwner owner = 10; */
        if (message.owner)
            PluginOwner.internalBinaryWrite(message.owner, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* repeated IRacingTools.Models.PluginComponentDefinition components = 20; */
        for (let i = 0; i < message.components.length; i++)
            PluginComponentDefinition.internalBinaryWrite(message.components[i], writer.tag(20, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IRacingTools.Models.PluginManifest
 */
export const PluginManifest = new PluginManifest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PluginInstall$Type extends MessageType<PluginInstall> {
    constructor() {
        super("IRacingTools.Models.PluginInstall", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "status", kind: "enum", T: () => ["IRacingTools.Models.PluginInstallStatus", PluginInstallStatus] },
            { no: 3, name: "is_internal", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "path", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "manifest_file", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "manifest", kind: "message", T: () => PluginManifest }
        ]);
    }
    create(value?: PartialMessage<PluginInstall>): PluginInstall {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.status = 0;
        message.isInternal = false;
        message.path = "";
        message.manifestFile = "";
        if (value !== undefined)
            reflectionMergePartial<PluginInstall>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PluginInstall): PluginInstall {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* IRacingTools.Models.PluginInstallStatus status */ 2:
                    message.status = reader.int32();
                    break;
                case /* bool is_internal */ 3:
                    message.isInternal = reader.bool();
                    break;
                case /* string path */ 5:
                    message.path = reader.string();
                    break;
                case /* string manifest_file */ 10:
                    message.manifestFile = reader.string();
                    break;
                case /* IRacingTools.Models.PluginManifest manifest */ 11:
                    message.manifest = PluginManifest.internalBinaryRead(reader, reader.uint32(), options, message.manifest);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PluginInstall, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* IRacingTools.Models.PluginInstallStatus status = 2; */
        if (message.status !== 0)
            writer.tag(2, WireType.Varint).int32(message.status);
        /* bool is_internal = 3; */
        if (message.isInternal !== false)
            writer.tag(3, WireType.Varint).bool(message.isInternal);
        /* string path = 5; */
        if (message.path !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.path);
        /* string manifest_file = 10; */
        if (message.manifestFile !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.manifestFile);
        /* IRacingTools.Models.PluginManifest manifest = 11; */
        if (message.manifest)
            PluginManifest.internalBinaryWrite(message.manifest, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IRacingTools.Models.PluginInstall
 */
export const PluginInstall = new PluginInstall$Type();
