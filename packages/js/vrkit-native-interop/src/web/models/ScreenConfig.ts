// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "ScreenConfig.proto" (package "IRacingTools.Models", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Position } from "./Geometry";
import { RectI } from "./Geometry";
import { SizeI } from "./Geometry";
/**
 * @generated from protobuf message IRacingTools.Models.DisplayConfig
 */
export interface DisplayConfig {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: bool primary = 5;
     */
    primary: boolean;
    /**
     * @generated from protobuf field: IRacingTools.Models.SizeI physical_size = 10;
     */
    physicalSize?: SizeI;
    /**
     * @generated from protobuf field: double scale = 20;
     */
    scale: number;
    /**
     * @generated from protobuf field: IRacingTools.Models.SizeI scaled_size = 21;
     */
    scaledSize?: SizeI;
    /**
     * @generated from protobuf field: IRacingTools.Models.RectI scaled_rect = 22;
     */
    scaledRect?: RectI;
}
/**
 * @generated from protobuf message IRacingTools.Models.DisplayLayoutConfig
 */
export interface DisplayLayoutConfig {
    /**
     * @generated from protobuf field: IRacingTools.Models.Position origin = 1;
     */
    origin?: Position;
    /**
     * @generated from protobuf field: IRacingTools.Models.Position origin_offset = 2;
     */
    originOffset?: Position;
    /**
     * @generated from protobuf field: repeated IRacingTools.Models.DisplayConfig displays = 5;
     */
    displays: DisplayConfig[];
}
/**
 * @generated from protobuf message IRacingTools.Models.VRLayoutConfig
 */
export interface VRLayoutConfig {
    /**
     * @generated from protobuf field: double scale = 10;
     */
    scale: number;
    /**
     * @generated from protobuf field: IRacingTools.Models.SizeI scaled_size = 11;
     */
    scaledSize?: SizeI;
}
/**
 * *
 * Represents a complete screen
 *
 * @generated from protobuf message IRacingTools.Models.ScreenConfig
 */
export interface ScreenConfig {
    /**
     * *
     * Must serve as a hash
     *
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: IRacingTools.Models.ScreenKind kind = 3;
     */
    kind: ScreenKind;
    /**
     * @generated from protobuf field: IRacingTools.Models.SizeI size = 6;
     */
    size?: SizeI;
    /**
     * @generated from protobuf oneof: layout
     */
    layout: {
        oneofKind: "display";
        /**
         * @generated from protobuf field: IRacingTools.Models.DisplayLayoutConfig display = 10;
         */
        display: DisplayLayoutConfig;
    } | {
        oneofKind: "vr";
        /**
         * @generated from protobuf field: IRacingTools.Models.VRLayoutConfig vr = 11;
         */
        vr: VRLayoutConfig;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf enum IRacingTools.Models.ScreenKind
 */
export enum ScreenKind {
    /**
     * @generated from protobuf enum value: SK_MONITOR = 0;
     */
    SK_MONITOR = 0,
    /**
     * @generated from protobuf enum value: SK_VR = 1;
     */
    SK_VR = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class DisplayConfig$Type extends MessageType<DisplayConfig> {
    constructor() {
        super("IRacingTools.Models.DisplayConfig", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "primary", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "physical_size", kind: "message", T: () => SizeI },
            { no: 20, name: "scale", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 21, name: "scaled_size", kind: "message", T: () => SizeI },
            { no: 22, name: "scaled_rect", kind: "message", T: () => RectI }
        ]);
    }
    create(value?: PartialMessage<DisplayConfig>): DisplayConfig {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.name = "";
        message.primary = false;
        message.scale = 0;
        if (value !== undefined)
            reflectionMergePartial<DisplayConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DisplayConfig): DisplayConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* bool primary */ 5:
                    message.primary = reader.bool();
                    break;
                case /* IRacingTools.Models.SizeI physical_size */ 10:
                    message.physicalSize = SizeI.internalBinaryRead(reader, reader.uint32(), options, message.physicalSize);
                    break;
                case /* double scale */ 20:
                    message.scale = reader.double();
                    break;
                case /* IRacingTools.Models.SizeI scaled_size */ 21:
                    message.scaledSize = SizeI.internalBinaryRead(reader, reader.uint32(), options, message.scaledSize);
                    break;
                case /* IRacingTools.Models.RectI scaled_rect */ 22:
                    message.scaledRect = RectI.internalBinaryRead(reader, reader.uint32(), options, message.scaledRect);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DisplayConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* bool primary = 5; */
        if (message.primary !== false)
            writer.tag(5, WireType.Varint).bool(message.primary);
        /* IRacingTools.Models.SizeI physical_size = 10; */
        if (message.physicalSize)
            SizeI.internalBinaryWrite(message.physicalSize, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* double scale = 20; */
        if (message.scale !== 0)
            writer.tag(20, WireType.Bit64).double(message.scale);
        /* IRacingTools.Models.SizeI scaled_size = 21; */
        if (message.scaledSize)
            SizeI.internalBinaryWrite(message.scaledSize, writer.tag(21, WireType.LengthDelimited).fork(), options).join();
        /* IRacingTools.Models.RectI scaled_rect = 22; */
        if (message.scaledRect)
            RectI.internalBinaryWrite(message.scaledRect, writer.tag(22, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IRacingTools.Models.DisplayConfig
 */
export const DisplayConfig = new DisplayConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DisplayLayoutConfig$Type extends MessageType<DisplayLayoutConfig> {
    constructor() {
        super("IRacingTools.Models.DisplayLayoutConfig", [
            { no: 1, name: "origin", kind: "message", T: () => Position },
            { no: 2, name: "origin_offset", kind: "message", T: () => Position },
            { no: 5, name: "displays", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DisplayConfig }
        ]);
    }
    create(value?: PartialMessage<DisplayLayoutConfig>): DisplayLayoutConfig {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.displays = [];
        if (value !== undefined)
            reflectionMergePartial<DisplayLayoutConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DisplayLayoutConfig): DisplayLayoutConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* IRacingTools.Models.Position origin */ 1:
                    message.origin = Position.internalBinaryRead(reader, reader.uint32(), options, message.origin);
                    break;
                case /* IRacingTools.Models.Position origin_offset */ 2:
                    message.originOffset = Position.internalBinaryRead(reader, reader.uint32(), options, message.originOffset);
                    break;
                case /* repeated IRacingTools.Models.DisplayConfig displays */ 5:
                    message.displays.push(DisplayConfig.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DisplayLayoutConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* IRacingTools.Models.Position origin = 1; */
        if (message.origin)
            Position.internalBinaryWrite(message.origin, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* IRacingTools.Models.Position origin_offset = 2; */
        if (message.originOffset)
            Position.internalBinaryWrite(message.originOffset, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated IRacingTools.Models.DisplayConfig displays = 5; */
        for (let i = 0; i < message.displays.length; i++)
            DisplayConfig.internalBinaryWrite(message.displays[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IRacingTools.Models.DisplayLayoutConfig
 */
export const DisplayLayoutConfig = new DisplayLayoutConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VRLayoutConfig$Type extends MessageType<VRLayoutConfig> {
    constructor() {
        super("IRacingTools.Models.VRLayoutConfig", [
            { no: 10, name: "scale", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 11, name: "scaled_size", kind: "message", T: () => SizeI }
        ]);
    }
    create(value?: PartialMessage<VRLayoutConfig>): VRLayoutConfig {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.scale = 0;
        if (value !== undefined)
            reflectionMergePartial<VRLayoutConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VRLayoutConfig): VRLayoutConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* double scale */ 10:
                    message.scale = reader.double();
                    break;
                case /* IRacingTools.Models.SizeI scaled_size */ 11:
                    message.scaledSize = SizeI.internalBinaryRead(reader, reader.uint32(), options, message.scaledSize);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VRLayoutConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* double scale = 10; */
        if (message.scale !== 0)
            writer.tag(10, WireType.Bit64).double(message.scale);
        /* IRacingTools.Models.SizeI scaled_size = 11; */
        if (message.scaledSize)
            SizeI.internalBinaryWrite(message.scaledSize, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IRacingTools.Models.VRLayoutConfig
 */
export const VRLayoutConfig = new VRLayoutConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ScreenConfig$Type extends MessageType<ScreenConfig> {
    constructor() {
        super("IRacingTools.Models.ScreenConfig", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "kind", kind: "enum", T: () => ["IRacingTools.Models.ScreenKind", ScreenKind] },
            { no: 6, name: "size", kind: "message", T: () => SizeI },
            { no: 10, name: "display", kind: "message", oneof: "layout", T: () => DisplayLayoutConfig },
            { no: 11, name: "vr", kind: "message", oneof: "layout", T: () => VRLayoutConfig }
        ]);
    }
    create(value?: PartialMessage<ScreenConfig>): ScreenConfig {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.name = "";
        message.kind = 0;
        message.layout = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<ScreenConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ScreenConfig): ScreenConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* IRacingTools.Models.ScreenKind kind */ 3:
                    message.kind = reader.int32();
                    break;
                case /* IRacingTools.Models.SizeI size */ 6:
                    message.size = SizeI.internalBinaryRead(reader, reader.uint32(), options, message.size);
                    break;
                case /* IRacingTools.Models.DisplayLayoutConfig display */ 10:
                    message.layout = {
                        oneofKind: "display",
                        display: DisplayLayoutConfig.internalBinaryRead(reader, reader.uint32(), options, (message.layout as any).display)
                    };
                    break;
                case /* IRacingTools.Models.VRLayoutConfig vr */ 11:
                    message.layout = {
                        oneofKind: "vr",
                        vr: VRLayoutConfig.internalBinaryRead(reader, reader.uint32(), options, (message.layout as any).vr)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ScreenConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* IRacingTools.Models.ScreenKind kind = 3; */
        if (message.kind !== 0)
            writer.tag(3, WireType.Varint).int32(message.kind);
        /* IRacingTools.Models.SizeI size = 6; */
        if (message.size)
            SizeI.internalBinaryWrite(message.size, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* IRacingTools.Models.DisplayLayoutConfig display = 10; */
        if (message.layout.oneofKind === "display")
            
            DisplayLayoutConfig.internalBinaryWrite((message.layout as any).display, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* IRacingTools.Models.VRLayoutConfig vr = 11; */
        if (message.layout.oneofKind === "vr")
            VRLayoutConfig.internalBinaryWrite((message.layout as any).vr, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IRacingTools.Models.ScreenConfig
 */
export const ScreenConfig = new ScreenConfig$Type();
