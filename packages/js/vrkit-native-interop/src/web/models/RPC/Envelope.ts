// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "RPC/Envelope.proto" (package "IRacingTools.Models.RPC", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Any } from "../google/protobuf/any";
/**
 * @generated from protobuf message IRacingTools.Models.RPC.Envelope
 */
export interface Envelope {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: IRacingTools.Models.RPC.Envelope.Kind kind = 2;
     */
    kind: Envelope_Kind;
    /**
     * @generated from protobuf field: IRacingTools.Models.RPC.Envelope.Status status = 3;
     */
    status: Envelope_Status;
    /**
     * @generated from protobuf field: string request_path = 10;
     */
    requestPath: string;
    /**
     * @generated from protobuf field: google.protobuf.Any payload = 50;
     */
    payload?: Any;
    /**
     * @generated from protobuf field: string error_details = 60;
     */
    errorDetails: string;
}
/**
 * @generated from protobuf enum IRacingTools.Models.RPC.Envelope.Kind
 */
export enum Envelope_Kind {
    /**
     * @generated from protobuf enum value: KIND_REQUEST = 0;
     */
    REQUEST = 0,
    /**
     * @generated from protobuf enum value: KIND_RESPONSE = 1;
     */
    RESPONSE = 1
}
/**
 * @generated from protobuf enum IRacingTools.Models.RPC.Envelope.Status
 */
export enum Envelope_Status {
    /**
     * @generated from protobuf enum value: STATUS_CREATED = 0;
     */
    CREATED = 0,
    /**
     * @generated from protobuf enum value: STATUS_IN_PROGRESS = 5;
     */
    IN_PROGRESS = 5,
    /**
     * @generated from protobuf enum value: STATUS_DONE = 10;
     */
    DONE = 10,
    /**
     * @generated from protobuf enum value: STATUS_ERROR = 20;
     */
    ERROR = 20
}
// @generated message type with reflection information, may provide speed optimized methods
class Envelope$Type extends MessageType<Envelope> {
    constructor() {
        super("IRacingTools.Models.RPC.Envelope", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "kind", kind: "enum", T: () => ["IRacingTools.Models.RPC.Envelope.Kind", Envelope_Kind, "KIND_"] },
            { no: 3, name: "status", kind: "enum", T: () => ["IRacingTools.Models.RPC.Envelope.Status", Envelope_Status, "STATUS_"] },
            { no: 10, name: "request_path", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 50, name: "payload", kind: "message", T: () => Any },
            { no: 60, name: "error_details", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Envelope>): Envelope {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.kind = 0;
        message.status = 0;
        message.requestPath = "";
        message.errorDetails = "";
        if (value !== undefined)
            reflectionMergePartial<Envelope>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Envelope): Envelope {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* IRacingTools.Models.RPC.Envelope.Kind kind */ 2:
                    message.kind = reader.int32();
                    break;
                case /* IRacingTools.Models.RPC.Envelope.Status status */ 3:
                    message.status = reader.int32();
                    break;
                case /* string request_path */ 10:
                    message.requestPath = reader.string();
                    break;
                case /* google.protobuf.Any payload */ 50:
                    message.payload = Any.internalBinaryRead(reader, reader.uint32(), options, message.payload);
                    break;
                case /* string error_details */ 60:
                    message.errorDetails = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Envelope, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* IRacingTools.Models.RPC.Envelope.Kind kind = 2; */
        if (message.kind !== 0)
            writer.tag(2, WireType.Varint).int32(message.kind);
        /* IRacingTools.Models.RPC.Envelope.Status status = 3; */
        if (message.status !== 0)
            writer.tag(3, WireType.Varint).int32(message.status);
        /* string request_path = 10; */
        if (message.requestPath !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.requestPath);
        /* google.protobuf.Any payload = 50; */
        if (message.payload)
            Any.internalBinaryWrite(message.payload, writer.tag(50, WireType.LengthDelimited).fork(), options).join();
        /* string error_details = 60; */
        if (message.errorDetails !== "")
            writer.tag(60, WireType.LengthDelimited).string(message.errorDetails);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IRacingTools.Models.RPC.Envelope
 */
export const Envelope = new Envelope$Type();
