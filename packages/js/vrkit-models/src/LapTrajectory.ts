// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "LapTrajectory.proto" (package "IRacingTools.Models", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { LapCoordinate } from "./LapCoordinate";
import { FileInfo } from "./FileInfo";
import { TrackLayoutMetadata } from "./TrackLayoutMetadata";
/**
 * @generated from protobuf message IRacingTools.Models.LapTrajectory
 */
export interface LapTrajectory {
    /**
     * @generated from protobuf field: IRacingTools.Models.LapTrajectory.Metadata metadata = 1;
     */
    metadata?: LapTrajectory_Metadata;
    /**
     * @generated from protobuf field: IRacingTools.Models.TrackLayoutMetadata track_layout_metadata = 2;
     */
    trackLayoutMetadata?: TrackLayoutMetadata;
    /**
     * @generated from protobuf field: IRacingTools.Models.FileInfo file_info = 3;
     */
    fileInfo?: FileInfo;
    /**
     * @generated from protobuf field: int64 timestamp = 5;
     */
    timestamp: bigint;
    /**
     * @generated from protobuf field: repeated IRacingTools.Models.LapCoordinate path = 20;
     */
    path: LapCoordinate[];
}
/**
 * @generated from protobuf message IRacingTools.Models.LapTrajectory.Metadata
 */
export interface LapTrajectory_Metadata {
    /**
     * @generated from protobuf field: uint32 lap = 1;
     */
    lap: number;
    /**
     * @generated from protobuf field: uint32 lap_time = 2;
     */
    lapTime: number;
    /**
     * @generated from protobuf field: uint32 incident_count = 3;
     */
    incidentCount: number;
    /**
     * @generated from protobuf field: bool valid = 4;
     */
    valid: boolean;
}
// @generated message type with reflection information, may provide speed optimized methods
class LapTrajectory$Type extends MessageType<LapTrajectory> {
    constructor() {
        super("IRacingTools.Models.LapTrajectory", [
            { no: 1, name: "metadata", kind: "message", T: () => LapTrajectory_Metadata },
            { no: 2, name: "track_layout_metadata", kind: "message", T: () => TrackLayoutMetadata },
            { no: 3, name: "file_info", kind: "message", T: () => FileInfo },
            { no: 5, name: "timestamp", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 20, name: "path", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => LapCoordinate }
        ]);
    }
    create(value?: PartialMessage<LapTrajectory>): LapTrajectory {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.timestamp = 0n;
        message.path = [];
        if (value !== undefined)
            reflectionMergePartial<LapTrajectory>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LapTrajectory): LapTrajectory {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* IRacingTools.Models.LapTrajectory.Metadata metadata */ 1:
                    message.metadata = LapTrajectory_Metadata.internalBinaryRead(reader, reader.uint32(), options, message.metadata);
                    break;
                case /* IRacingTools.Models.TrackLayoutMetadata track_layout_metadata */ 2:
                    message.trackLayoutMetadata = TrackLayoutMetadata.internalBinaryRead(reader, reader.uint32(), options, message.trackLayoutMetadata);
                    break;
                case /* IRacingTools.Models.FileInfo file_info */ 3:
                    message.fileInfo = FileInfo.internalBinaryRead(reader, reader.uint32(), options, message.fileInfo);
                    break;
                case /* int64 timestamp */ 5:
                    message.timestamp = reader.int64().toBigInt();
                    break;
                case /* repeated IRacingTools.Models.LapCoordinate path */ 20:
                    message.path.push(LapCoordinate.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LapTrajectory, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* IRacingTools.Models.LapTrajectory.Metadata metadata = 1; */
        if (message.metadata)
            LapTrajectory_Metadata.internalBinaryWrite(message.metadata, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* IRacingTools.Models.TrackLayoutMetadata track_layout_metadata = 2; */
        if (message.trackLayoutMetadata)
            TrackLayoutMetadata.internalBinaryWrite(message.trackLayoutMetadata, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* IRacingTools.Models.FileInfo file_info = 3; */
        if (message.fileInfo)
            FileInfo.internalBinaryWrite(message.fileInfo, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* int64 timestamp = 5; */
        if (message.timestamp !== 0n)
            writer.tag(5, WireType.Varint).int64(message.timestamp);
        /* repeated IRacingTools.Models.LapCoordinate path = 20; */
        for (let i = 0; i < message.path.length; i++)
            LapCoordinate.internalBinaryWrite(message.path[i], writer.tag(20, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IRacingTools.Models.LapTrajectory
 */
export const LapTrajectory = new LapTrajectory$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LapTrajectory_Metadata$Type extends MessageType<LapTrajectory_Metadata> {
    constructor() {
        super("IRacingTools.Models.LapTrajectory.Metadata", [
            { no: 1, name: "lap", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "lap_time", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "incident_count", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "valid", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<LapTrajectory_Metadata>): LapTrajectory_Metadata {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.lap = 0;
        message.lapTime = 0;
        message.incidentCount = 0;
        message.valid = false;
        if (value !== undefined)
            reflectionMergePartial<LapTrajectory_Metadata>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LapTrajectory_Metadata): LapTrajectory_Metadata {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 lap */ 1:
                    message.lap = reader.uint32();
                    break;
                case /* uint32 lap_time */ 2:
                    message.lapTime = reader.uint32();
                    break;
                case /* uint32 incident_count */ 3:
                    message.incidentCount = reader.uint32();
                    break;
                case /* bool valid */ 4:
                    message.valid = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LapTrajectory_Metadata, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 lap = 1; */
        if (message.lap !== 0)
            writer.tag(1, WireType.Varint).uint32(message.lap);
        /* uint32 lap_time = 2; */
        if (message.lapTime !== 0)
            writer.tag(2, WireType.Varint).uint32(message.lapTime);
        /* uint32 incident_count = 3; */
        if (message.incidentCount !== 0)
            writer.tag(3, WireType.Varint).uint32(message.incidentCount);
        /* bool valid = 4; */
        if (message.valid !== false)
            writer.tag(4, WireType.Varint).bool(message.valid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IRacingTools.Models.LapTrajectory.Metadata
 */
export const LapTrajectory_Metadata = new LapTrajectory_Metadata$Type();
