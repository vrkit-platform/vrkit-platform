// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "LapCoordinate.proto" (package "IRacingTools.Models", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message IRacingTools.Models.LapCoordinate
 */
export interface LapCoordinate {
    /**
     * @generated from protobuf field: uint32 lap_time = 1;
     */
    lapTime: number;
    /**
     * @generated from protobuf field: float lap_percent_complete = 2;
     */
    lapPercentComplete: number;
    /**
     * @generated from protobuf field: float lap_distance = 3;
     */
    lapDistance: number;
    /**
     * @generated from protobuf field: double latitude = 10;
     */
    latitude: number;
    /**
     * @generated from protobuf field: double longitude = 11;
     */
    longitude: number;
    /**
     * @generated from protobuf field: float altitude = 12;
     */
    altitude: number;
    /**
     * @generated from protobuf field: float x = 20;
     */
    x: number;
    /**
     * @generated from protobuf field: float y = 21;
     */
    y: number;
    /**
     * @generated from protobuf field: float lap_distance_calculated = 22;
     */
    lapDistanceCalculated: number;
    /**
     * @generated from protobuf field: float speed = 30;
     */
    speed: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class LapCoordinate$Type extends MessageType<LapCoordinate> {
    constructor() {
        super("IRacingTools.Models.LapCoordinate", [
            { no: 1, name: "lap_time", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "lap_percent_complete", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 3, name: "lap_distance", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 10, name: "latitude", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 11, name: "longitude", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 12, name: "altitude", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 20, name: "x", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 21, name: "y", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 22, name: "lap_distance_calculated", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 30, name: "speed", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<LapCoordinate>): LapCoordinate {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.lapTime = 0;
        message.lapPercentComplete = 0;
        message.lapDistance = 0;
        message.latitude = 0;
        message.longitude = 0;
        message.altitude = 0;
        message.x = 0;
        message.y = 0;
        message.lapDistanceCalculated = 0;
        message.speed = 0;
        if (value !== undefined)
            reflectionMergePartial<LapCoordinate>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LapCoordinate): LapCoordinate {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 lap_time */ 1:
                    message.lapTime = reader.uint32();
                    break;
                case /* float lap_percent_complete */ 2:
                    message.lapPercentComplete = reader.float();
                    break;
                case /* float lap_distance */ 3:
                    message.lapDistance = reader.float();
                    break;
                case /* double latitude */ 10:
                    message.latitude = reader.double();
                    break;
                case /* double longitude */ 11:
                    message.longitude = reader.double();
                    break;
                case /* float altitude */ 12:
                    message.altitude = reader.float();
                    break;
                case /* float x */ 20:
                    message.x = reader.float();
                    break;
                case /* float y */ 21:
                    message.y = reader.float();
                    break;
                case /* float lap_distance_calculated */ 22:
                    message.lapDistanceCalculated = reader.float();
                    break;
                case /* float speed */ 30:
                    message.speed = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LapCoordinate, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 lap_time = 1; */
        if (message.lapTime !== 0)
            writer.tag(1, WireType.Varint).uint32(message.lapTime);
        /* float lap_percent_complete = 2; */
        if (message.lapPercentComplete !== 0)
            writer.tag(2, WireType.Bit32).float(message.lapPercentComplete);
        /* float lap_distance = 3; */
        if (message.lapDistance !== 0)
            writer.tag(3, WireType.Bit32).float(message.lapDistance);
        /* double latitude = 10; */
        if (message.latitude !== 0)
            writer.tag(10, WireType.Bit64).double(message.latitude);
        /* double longitude = 11; */
        if (message.longitude !== 0)
            writer.tag(11, WireType.Bit64).double(message.longitude);
        /* float altitude = 12; */
        if (message.altitude !== 0)
            writer.tag(12, WireType.Bit32).float(message.altitude);
        /* float x = 20; */
        if (message.x !== 0)
            writer.tag(20, WireType.Bit32).float(message.x);
        /* float y = 21; */
        if (message.y !== 0)
            writer.tag(21, WireType.Bit32).float(message.y);
        /* float lap_distance_calculated = 22; */
        if (message.lapDistanceCalculated !== 0)
            writer.tag(22, WireType.Bit32).float(message.lapDistanceCalculated);
        /* float speed = 30; */
        if (message.speed !== 0)
            writer.tag(30, WireType.Bit32).float(message.speed);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IRacingTools.Models.LapCoordinate
 */
export const LapCoordinate = new LapCoordinate$Type();
